{"doc_id": 0, "doc": {"id": 0, "repo": "the-control-group/voyager", "path": "src/Commands/AdminCommand.php", "func_name": "AdminCommand.getAdministratorRole", "original_string": "protected function getAdministratorRole()\n    {\n        $role = Voyager::model('Role')->firstOrNew([\n            'name' => 'admin',\n        ]);\n\n        if (!$role->exists) {\n            $role->fill([\n                'display_name' => 'Administrator',\n            ])->save();\n        }\n\n        return $role;\n    }", "language": "php", "code": "protected function getAdministratorRole()\n    {\n        $role = Voyager::model('Role')->firstOrNew([\n            'name' => 'admin',\n        ]);\n\n        if (!$role->exists) {\n            $role->fill([\n                'display_name' => 'Administrator',\n            ])->save();\n        }\n\n        return $role;\n    }", "code_tokens": ["protected", "function", "getAdministratorRole", "(", ")", "{", "$", "role", "=", "Voyager", "::", "model", "(", "'Role'", ")", "->", "firstOrNew", "(", "[", "'name'", "=>", "'admin'", ",", "]", ")", ";", "if", "(", "!", "$", "role", "->", "exists", ")", "{", "$", "role", "->", "fill", "(", "[", "'display_name'", "=>", "'Administrator'", ",", "]", ")", "->", "save", "(", ")", ";", "}", "return", "$", "role", ";", "}"], "docstring": "Get the administrator role, create it if it does not exists.\n\n@return mixed", "docstring_tokens": ["Get", "the", "administrator", "role", "create", "it", "if", "it", "does", "not", "exists", "."], "sha": "5315b63a5d17c7de877019ac53bec5bd7fd8e12c", "url": "https://github.com/the-control-group/voyager/blob/5315b63a5d17c7de877019ac53bec5bd7fd8e12c/src/Commands/AdminCommand.php#L93-L106"}, "target": "Get the administrator role create it if it does not exists .", "arguments": {"gen_args_0": {"arg_0": "protected function getAdministratorRole ( ) { $ role = Voyager :: model ( 'Role' ) -> firstOrNew ( [ 'name' => 'admin' , ] ) ; if ( ! $ role -> exists ) { $ role -> fill ( [ 'display_name' => 'Administrator' , ] ) -> save ( ) ; } return $ role ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [[""]], "filtered_resps": [""], "doc_hash": "b3692acc800862420d806804302408357f57c0080e21ba5f053978546ab31c7e", "prompt_hash": "4c49a9b1594ee03879ccc768d4868c6d89677bbfb87dd78daf34ccabe6f862cc", "target_hash": "50cf7135ffba7998c8b2aa8bb60b8fe21fcf897ff2f605fecbb69db6630e3a22", "smoothed_bleu_4": 0.000614421235332821}
{"doc_id": 1, "doc": {"id": 1, "repo": "the-control-group/voyager", "path": "src/Commands/AdminCommand.php", "func_name": "AdminCommand.getUser", "original_string": "protected function getUser($create = false)\n    {\n        $email = $this->argument('email');\n\n        $model = config('voyager.user.namespace') ?: config('auth.providers.users.model');\n\n        // If we need to create a new user go ahead and create it\n        if ($create) {\n            $name = $this->ask('Enter the admin name');\n            $password = $this->secret('Enter admin password');\n            $confirmPassword = $this->secret('Confirm Password');\n\n            // Ask for email if there wasnt set one\n            if (!$email) {\n                $email = $this->ask('Enter the admin email');\n            }\n\n            // Passwords don't match\n            if ($password != $confirmPassword) {\n                $this->info(\"Passwords don't match\");\n\n                return;\n            }\n\n            $this->info('Creating admin account');\n\n            return $model::create([\n                'name'     => $name,\n                'email'    => $email,\n                'password' => Hash::make($password),\n            ]);\n        }\n\n        return $model::where('email', $email)->firstOrFail();\n    }", "language": "php", "code": "protected function getUser($create = false)\n    {\n        $email = $this->argument('email');\n\n        $model = config('voyager.user.namespace') ?: config('auth.providers.users.model');\n\n        // If we need to create a new user go ahead and create it\n        if ($create) {\n            $name = $this->ask('Enter the admin name');\n            $password = $this->secret('Enter admin password');\n            $confirmPassword = $this->secret('Confirm Password');\n\n            // Ask for email if there wasnt set one\n            if (!$email) {\n                $email = $this->ask('Enter the admin email');\n            }\n\n            // Passwords don't match\n            if ($password != $confirmPassword) {\n                $this->info(\"Passwords don't match\");\n\n                return;\n            }\n\n            $this->info('Creating admin account');\n\n            return $model::create([\n                'name'     => $name,\n                'email'    => $email,\n                'password' => Hash::make($password),\n            ]);\n        }\n\n        return $model::where('email', $email)->firstOrFail();\n    }", "code_tokens": ["protected", "function", "getUser", "(", "$", "create", "=", "false", ")", "{", "$", "email", "=", "$", "this", "->", "argument", "(", "'email'", ")", ";", "$", "model", "=", "config", "(", "'voyager.user.namespace'", ")", "?", ":", "config", "(", "'auth.providers.users.model'", ")", ";", "// If we need to create a new user go ahead and create it", "if", "(", "$", "create", ")", "{", "$", "name", "=", "$", "this", "->", "ask", "(", "'Enter the admin name'", ")", ";", "$", "password", "=", "$", "this", "->", "secret", "(", "'Enter admin password'", ")", ";", "$", "confirmPassword", "=", "$", "this", "->", "secret", "(", "'Confirm Password'", ")", ";", "// Ask for email if there wasnt set one", "if", "(", "!", "$", "email", ")", "{", "$", "email", "=", "$", "this", "->", "ask", "(", "'Enter the admin email'", ")", ";", "}", "// Passwords don't match", "if", "(", "$", "password", "!=", "$", "confirmPassword", ")", "{", "$", "this", "->", "info", "(", "\"Passwords don't match\"", ")", ";", "return", ";", "}", "$", "this", "->", "info", "(", "'Creating admin account'", ")", ";", "return", "$", "model", "::", "create", "(", "[", "'name'", "=>", "$", "name", ",", "'email'", "=>", "$", "email", ",", "'password'", "=>", "Hash", "::", "make", "(", "$", "password", ")", ",", "]", ")", ";", "}", "return", "$", "model", "::", "where", "(", "'email'", ",", "$", "email", ")", "->", "firstOrFail", "(", ")", ";", "}"], "docstring": "Get or create user.\n\n@param bool $create\n\n@return \\App\\User", "docstring_tokens": ["Get", "or", "create", "user", "."], "sha": "5315b63a5d17c7de877019ac53bec5bd7fd8e12c", "url": "https://github.com/the-control-group/voyager/blob/5315b63a5d17c7de877019ac53bec5bd7fd8e12c/src/Commands/AdminCommand.php#L115-L149"}, "target": "Get or create user .", "arguments": {"gen_args_0": {"arg_0": "protected function getUser ( $ create = false ) { $ email = $ this -> argument ( 'email' ) ; $ model = config ( 'voyager.user.namespace' ) ? : config ( 'auth.providers.users.model' ) ; // If we need to create a new user go ahead and create it if ( $ create ) { $ name = $ this -> ask ( 'Enter the admin name' ) ; $ password = $ this -> secret ( 'Enter admin password' ) ; $ confirmPassword = $ this -> secret ( 'Confirm Password' ) ; // Ask for email if there wasnt set one if ( ! $ email ) { $ email = $ this -> ask ( 'Enter the admin email' ) ; } // Passwords don't match if ( $ password != $ confirmPassword ) { $ this -> info ( \"Passwords don't match\" ) ; return ; } $ this -> info ( 'Creating admin account' ) ; return $ model :: create ( [ 'name' => $ name , 'email' => $ email , 'password' => Hash :: make ( $ password ) , ] ) ; } return $ model :: where ( 'email' , $ email ) -> firstOrFail ( ) ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [[""]], "filtered_resps": [""], "doc_hash": "4288b66af8431d323d1b39db96807f3836f55ea7c0db185a54c3855e39b7065c", "prompt_hash": "1f4562aec8ded8286ad1110ccf0327f8e3e425fbfb6326243b1cae6950b22006", "target_hash": "c08585d43b965d3c1294bfc7ca4481bad84f36d149e20ca2bc175fef3d97c7c5", "smoothed_bleu_4": 0.6737946999085467}
{"doc_id": 2, "doc": {"id": 2, "repo": "the-control-group/voyager", "path": "src/Listeners/DeleteBreadMenuItem.php", "func_name": "DeleteBreadMenuItem.handle", "original_string": "public function handle(BreadDeleted $bread)\n    {\n        if (config('voyager.bread.add_menu_item')) {\n            $menuItem = Voyager::model('MenuItem')->where('route', 'voyager.'.$bread->dataType->slug.'.index');\n\n            if ($menuItem->exists()) {\n                $menuItem->delete();\n            }\n        }\n    }", "language": "php", "code": "public function handle(BreadDeleted $bread)\n    {\n        if (config('voyager.bread.add_menu_item')) {\n            $menuItem = Voyager::model('MenuItem')->where('route', 'voyager.'.$bread->dataType->slug.'.index');\n\n            if ($menuItem->exists()) {\n                $menuItem->delete();\n            }\n        }\n    }", "code_tokens": ["public", "function", "handle", "(", "BreadDeleted", "$", "bread", ")", "{", "if", "(", "config", "(", "'voyager.bread.add_menu_item'", ")", ")", "{", "$", "menuItem", "=", "Voyager", "::", "model", "(", "'MenuItem'", ")", "->", "where", "(", "'route'", ",", "'voyager.'", ".", "$", "bread", "->", "dataType", "->", "slug", ".", "'.index'", ")", ";", "if", "(", "$", "menuItem", "->", "exists", "(", ")", ")", "{", "$", "menuItem", "->", "delete", "(", ")", ";", "}", "}", "}"], "docstring": "Delete a MenuItem for a given BREAD.\n\n@param BreadDeleted $bread\n\n@return void", "docstring_tokens": ["Delete", "a", "MenuItem", "for", "a", "given", "BREAD", "."], "sha": "5315b63a5d17c7de877019ac53bec5bd7fd8e12c", "url": "https://github.com/the-control-group/voyager/blob/5315b63a5d17c7de877019ac53bec5bd7fd8e12c/src/Listeners/DeleteBreadMenuItem.php#L27-L36"}, "target": "Delete a MenuItem for a given BREAD .", "arguments": {"gen_args_0": {"arg_0": "public function handle ( BreadDeleted $ bread ) { if ( config ( 'voyager.bread.add_menu_item' ) ) { $ menuItem = Voyager :: model ( 'MenuItem' ) -> where ( 'route' , 'voyager.' . $ bread -> dataType -> slug . '.index' ) ; if ( $ menuItem -> exists ( ) ) { $ menuItem -> delete ( ) ; } } }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [[""]], "filtered_resps": [""], "doc_hash": "34751d888a5b715b285f78b3c351b95dc084d8398e5f2ebe97e3c66614eeb8d1", "prompt_hash": "9806ffe339a93f00f997747675092cbef9c7623ce91303a19e4b66e8fc6d3115", "target_hash": "3785502e29d3969717aa3818a02f28cd3fb1041645713dbfc4431682aa83c846", "smoothed_bleu_4": 0.033546262790251184}
{"doc_id": 3, "doc": {"id": 3, "repo": "the-control-group/voyager", "path": "publishable/database/seeds/TranslationsTableSeeder.php", "func_name": "TranslationsTableSeeder.categoriesTranslations", "original_string": "private function categoriesTranslations()\n    {\n        // Adding translations for 'categories'\n        //\n        $cat = Category::where('slug', 'category-1')->firstOrFail();\n        if ($cat->exists) {\n            $this->trans('pt', $this->arr(['categories', 'slug'], $cat->id), 'categoria-1');\n            $this->trans('pt', $this->arr(['categories', 'name'], $cat->id), 'Categoria 1');\n        }\n        $cat = Category::where('slug', 'category-2')->firstOrFail();\n        if ($cat->exists) {\n            $this->trans('pt', $this->arr(['categories', 'slug'], $cat->id), 'categoria-2');\n            $this->trans('pt', $this->arr(['categories', 'name'], $cat->id), 'Categoria 2');\n        }\n    }", "language": "php", "code": "private function categoriesTranslations()\n    {\n        // Adding translations for 'categories'\n        //\n        $cat = Category::where('slug', 'category-1')->firstOrFail();\n        if ($cat->exists) {\n            $this->trans('pt', $this->arr(['categories', 'slug'], $cat->id), 'categoria-1');\n            $this->trans('pt', $this->arr(['categories', 'name'], $cat->id), 'Categoria 1');\n        }\n        $cat = Category::where('slug', 'category-2')->firstOrFail();\n        if ($cat->exists) {\n            $this->trans('pt', $this->arr(['categories', 'slug'], $cat->id), 'categoria-2');\n            $this->trans('pt', $this->arr(['categories', 'name'], $cat->id), 'Categoria 2');\n        }\n    }", "code_tokens": ["private", "function", "categoriesTranslations", "(", ")", "{", "// Adding translations for 'categories'", "//", "$", "cat", "=", "Category", "::", "where", "(", "'slug'", ",", "'category-1'", ")", "->", "firstOrFail", "(", ")", ";", "if", "(", "$", "cat", "->", "exists", ")", "{", "$", "this", "->", "trans", "(", "'pt'", ",", "$", "this", "->", "arr", "(", "[", "'categories'", ",", "'slug'", "]", ",", "$", "cat", "->", "id", ")", ",", "'categoria-1'", ")", ";", "$", "this", "->", "trans", "(", "'pt'", ",", "$", "this", "->", "arr", "(", "[", "'categories'", ",", "'name'", "]", ",", "$", "cat", "->", "id", ")", ",", "'Categoria 1'", ")", ";", "}", "$", "cat", "=", "Category", "::", "where", "(", "'slug'", ",", "'category-2'", ")", "->", "firstOrFail", "(", ")", ";", "if", "(", "$", "cat", "->", "exists", ")", "{", "$", "this", "->", "trans", "(", "'pt'", ",", "$", "this", "->", "arr", "(", "[", "'categories'", ",", "'slug'", "]", ",", "$", "cat", "->", "id", ")", ",", "'categoria-2'", ")", ";", "$", "this", "->", "trans", "(", "'pt'", ",", "$", "this", "->", "arr", "(", "[", "'categories'", ",", "'name'", "]", ",", "$", "cat", "->", "id", ")", ",", "'Categoria 2'", ")", ";", "}", "}"], "docstring": "Auto generate Categories Translations.\n\n@return void", "docstring_tokens": ["Auto", "generate", "Categories", "Translations", "."], "sha": "5315b63a5d17c7de877019ac53bec5bd7fd8e12c", "url": "https://github.com/the-control-group/voyager/blob/5315b63a5d17c7de877019ac53bec5bd7fd8e12c/publishable/database/seeds/TranslationsTableSeeder.php#L30-L44"}, "target": "Auto generate Categories Translations .", "arguments": {"gen_args_0": {"arg_0": "private function categoriesTranslations ( ) { // Adding translations for 'categories' // $ cat = Category :: where ( 'slug' , 'category-1' ) -> firstOrFail ( ) ; if ( $ cat -> exists ) { $ this -> trans ( 'pt' , $ this -> arr ( [ 'categories' , 'slug' ] , $ cat -> id ) , 'categoria-1' ) ; $ this -> trans ( 'pt' , $ this -> arr ( [ 'categories' , 'name' ] , $ cat -> id ) , 'Categoria 1' ) ; } $ cat = Category :: where ( 'slug' , 'category-2' ) -> firstOrFail ( ) ; if ( $ cat -> exists ) { $ this -> trans ( 'pt' , $ this -> arr ( [ 'categories' , 'slug' ] , $ cat -> id ) , 'categoria-2' ) ; $ this -> trans ( 'pt' , $ this -> arr ( [ 'categories' , 'name' ] , $ cat -> id ) , 'Categoria 2' ) ; } }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [[""]], "filtered_resps": [""], "doc_hash": "9137be1e9bfd96960a8a3c0fcf9b37c549a15ae075201a00209f14688bac6cd9", "prompt_hash": "20c68a2b41443b3884d7d515bdd27675f8716adf27f16f2d7adeb2916583a2d1", "target_hash": "c8bc0d0d8fdd08df0664b4b11dd043d33056db0ae969020aa1df5836615ff75a", "smoothed_bleu_4": 0.6737946999085467}
{"doc_id": 4, "doc": {"id": 4, "repo": "the-control-group/voyager", "path": "src/Models/MenuItem.php", "func_name": "MenuItem.highestOrderMenuItem", "original_string": "public function highestOrderMenuItem($parent = null)\n    {\n        $order = 1;\n\n        $item = $this->where('parent_id', '=', $parent)\n            ->orderBy('order', 'DESC')\n            ->first();\n\n        if (!is_null($item)) {\n            $order = intval($item->order) + 1;\n        }\n\n        return $order;\n    }", "language": "php", "code": "public function highestOrderMenuItem($parent = null)\n    {\n        $order = 1;\n\n        $item = $this->where('parent_id', '=', $parent)\n            ->orderBy('order', 'DESC')\n            ->first();\n\n        if (!is_null($item)) {\n            $order = intval($item->order) + 1;\n        }\n\n        return $order;\n    }", "code_tokens": ["public", "function", "highestOrderMenuItem", "(", "$", "parent", "=", "null", ")", "{", "$", "order", "=", "1", ";", "$", "item", "=", "$", "this", "->", "where", "(", "'parent_id'", ",", "'='", ",", "$", "parent", ")", "->", "orderBy", "(", "'order'", ",", "'DESC'", ")", "->", "first", "(", ")", ";", "if", "(", "!", "is_null", "(", "$", "item", ")", ")", "{", "$", "order", "=", "intval", "(", "$", "item", "->", "order", ")", "+", "1", ";", "}", "return", "$", "order", ";", "}"], "docstring": "Return the Highest Order Menu Item.\n\n@param number $parent (Optional) Parent id. Default null\n\n@return number Order number", "docstring_tokens": ["Return", "the", "Highest", "Order", "Menu", "Item", "."], "sha": "5315b63a5d17c7de877019ac53bec5bd7fd8e12c", "url": "https://github.com/the-control-group/voyager/blob/5315b63a5d17c7de877019ac53bec5bd7fd8e12c/src/Models/MenuItem.php#L121-L134"}, "target": "Return the Highest Order Menu Item .", "arguments": {"gen_args_0": {"arg_0": "public function highestOrderMenuItem ( $ parent = null ) { $ order = 1 ; $ item = $ this -> where ( 'parent_id' , '=' , $ parent ) -> orderBy ( 'order' , 'DESC' ) -> first ( ) ; if ( ! is_null ( $ item ) ) { $ order = intval ( $ item -> order ) + 1 ; } return $ order ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [[""]], "filtered_resps": [""], "doc_hash": "15355dbf8f8efc5d3d09fbbd7ab7cb932c94dc34abdcca7dfba8f096db003bf9", "prompt_hash": "8331d581b068bc2ee3b41d3631450d17238601c76292d8429bdbda9175ef4a05", "target_hash": "81b1ba0e4d4caa30cd49981a0758ba0ab40e9828c038e2d31aabdf5791011239", "smoothed_bleu_4": 0.09118819655545163}
{"doc_id": 5, "doc": {"id": 5, "repo": "the-control-group/voyager", "path": "src/Database/Schema/Index.php", "func_name": "Index.createName", "original_string": "public static function createName(array $columns, $type, $table = null)\n    {\n        $table = isset($table) ? trim($table).'_' : '';\n        $type = trim($type);\n        $name = strtolower($table.implode('_', $columns).'_'.$type);\n\n        return str_replace(['-', '.'], '_', $name);\n    }", "language": "php", "code": "public static function createName(array $columns, $type, $table = null)\n    {\n        $table = isset($table) ? trim($table).'_' : '';\n        $type = trim($type);\n        $name = strtolower($table.implode('_', $columns).'_'.$type);\n\n        return str_replace(['-', '.'], '_', $name);\n    }", "code_tokens": ["public", "static", "function", "createName", "(", "array", "$", "columns", ",", "$", "type", ",", "$", "table", "=", "null", ")", "{", "$", "table", "=", "isset", "(", "$", "table", ")", "?", "trim", "(", "$", "table", ")", ".", "'_'", ":", "''", ";", "$", "type", "=", "trim", "(", "$", "type", ")", ";", "$", "name", "=", "strtolower", "(", "$", "table", ".", "implode", "(", "'_'", ",", "$", "columns", ")", ".", "'_'", ".", "$", "type", ")", ";", "return", "str_replace", "(", "[", "'-'", ",", "'.'", "]", ",", "'_'", ",", "$", "name", ")", ";", "}"], "docstring": "Create a default index name.\n\n@param array  $columns\n@param string $type\n@param string $table\n\n@return string", "docstring_tokens": ["Create", "a", "default", "index", "name", "."], "sha": "5315b63a5d17c7de877019ac53bec5bd7fd8e12c", "url": "https://github.com/the-control-group/voyager/blob/5315b63a5d17c7de877019ac53bec5bd7fd8e12c/src/Database/Schema/Index.php#L95-L102"}, "target": "Create a default index name .", "arguments": {"gen_args_0": {"arg_0": "public static function createName ( array $ columns , $ type , $ table = null ) { $ table = isset ( $ table ) ? trim ( $ table ) . '_' : '' ; $ type = trim ( $ type ) ; $ name = strtolower ( $ table . implode ( '_' , $ columns ) . '_' . $ type ) ; return str_replace ( [ '-' , '.' ] , '_' , $ name ) ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [["## What is the difference between a primary key and a foreign key?"]], "filtered_resps": ["## What is the difference between a primary key and a foreign key?"], "doc_hash": "a2ed3b1e3a39cf4a68518cf0b50df70b96da8670208a1168392983c5946764e4", "prompt_hash": "3b5089646d4c6daed446116c0f77a830a62eacd6a85473df7c89aeca8f8e00a2", "target_hash": "e8afd08c7003fdece0d6d9d54eb5150ba825ccba851728dd20c6c0206ac68ef3", "smoothed_bleu_4": 7.029695662739612}
{"doc_id": 6, "doc": {"id": 6, "repo": "the-control-group/voyager", "path": "src/Listeners/AddBreadMenuItem.php", "func_name": "AddBreadMenuItem.handle", "original_string": "public function handle(BreadAdded $bread)\n    {\n        if (config('voyager.bread.add_menu_item') && file_exists(base_path('routes/web.php'))) {\n            require base_path('routes/web.php');\n\n            $menu = Voyager::model('Menu')->where('name', config('voyager.bread.default_menu'))->firstOrFail();\n\n            $menuItem = Voyager::model('MenuItem')->firstOrNew([\n                'menu_id' => $menu->id,\n                'title'   => $bread->dataType->display_name_plural,\n                'url'     => '',\n                'route'   => 'voyager.'.$bread->dataType->slug.'.index',\n            ]);\n\n            $order = Voyager::model('MenuItem')->highestOrderMenuItem();\n\n            if (!$menuItem->exists) {\n                $menuItem->fill([\n                    'target'     => '_self',\n                    'icon_class' => $bread->dataType->icon,\n                    'color'      => null,\n                    'parent_id'  => null,\n                    'order'      => $order,\n                ])->save();\n            }\n        }\n    }", "language": "php", "code": "public function handle(BreadAdded $bread)\n    {\n        if (config('voyager.bread.add_menu_item') && file_exists(base_path('routes/web.php'))) {\n            require base_path('routes/web.php');\n\n            $menu = Voyager::model('Menu')->where('name', config('voyager.bread.default_menu'))->firstOrFail();\n\n            $menuItem = Voyager::model('MenuItem')->firstOrNew([\n                'menu_id' => $menu->id,\n                'title'   => $bread->dataType->display_name_plural,\n                'url'     => '',\n                'route'   => 'voyager.'.$bread->dataType->slug.'.index',\n            ]);\n\n            $order = Voyager::model('MenuItem')->highestOrderMenuItem();\n\n            if (!$menuItem->exists) {\n                $menuItem->fill([\n                    'target'     => '_self',\n                    'icon_class' => $bread->dataType->icon,\n                    'color'      => null,\n                    'parent_id'  => null,\n                    'order'      => $order,\n                ])->save();\n            }\n        }\n    }", "code_tokens": ["public", "function", "handle", "(", "BreadAdded", "$", "bread", ")", "{", "if", "(", "config", "(", "'voyager.bread.add_menu_item'", ")", "&&", "file_exists", "(", "base_path", "(", "'routes/web.php'", ")", ")", ")", "{", "require", "base_path", "(", "'routes/web.php'", ")", ";", "$", "menu", "=", "Voyager", "::", "model", "(", "'Menu'", ")", "->", "where", "(", "'name'", ",", "config", "(", "'voyager.bread.default_menu'", ")", ")", "->", "firstOrFail", "(", ")", ";", "$", "menuItem", "=", "Voyager", "::", "model", "(", "'MenuItem'", ")", "->", "firstOrNew", "(", "[", "'menu_id'", "=>", "$", "menu", "->", "id", ",", "'title'", "=>", "$", "bread", "->", "dataType", "->", "display_name_plural", ",", "'url'", "=>", "''", ",", "'route'", "=>", "'voyager.'", ".", "$", "bread", "->", "dataType", "->", "slug", ".", "'.index'", ",", "]", ")", ";", "$", "order", "=", "Voyager", "::", "model", "(", "'MenuItem'", ")", "->", "highestOrderMenuItem", "(", ")", ";", "if", "(", "!", "$", "menuItem", "->", "exists", ")", "{", "$", "menuItem", "->", "fill", "(", "[", "'target'", "=>", "'_self'", ",", "'icon_class'", "=>", "$", "bread", "->", "dataType", "->", "icon", ",", "'color'", "=>", "null", ",", "'parent_id'", "=>", "null", ",", "'order'", "=>", "$", "order", ",", "]", ")", "->", "save", "(", ")", ";", "}", "}", "}"], "docstring": "Create a MenuItem for a given BREAD.\n\n@param BreadAdded $event\n\n@return void", "docstring_tokens": ["Create", "a", "MenuItem", "for", "a", "given", "BREAD", "."], "sha": "5315b63a5d17c7de877019ac53bec5bd7fd8e12c", "url": "https://github.com/the-control-group/voyager/blob/5315b63a5d17c7de877019ac53bec5bd7fd8e12c/src/Listeners/AddBreadMenuItem.php#L27-L53"}, "target": "Create a MenuItem for a given BREAD .", "arguments": {"gen_args_0": {"arg_0": "public function handle ( BreadAdded $ bread ) { if ( config ( 'voyager.bread.add_menu_item' ) && file_exists ( base_path ( 'routes/web.php' ) ) ) { require base_path ( 'routes/web.php' ) ; $ menu = Voyager :: model ( 'Menu' ) -> where ( 'name' , config ( 'voyager.bread.default_menu' ) ) -> firstOrFail ( ) ; $ menuItem = Voyager :: model ( 'MenuItem' ) -> firstOrNew ( [ 'menu_id' => $ menu -> id , 'title' => $ bread -> dataType -> display_name_plural , 'url' => '' , 'route' => 'voyager.' . $ bread -> dataType -> slug . '.index' , ] ) ; $ order = Voyager :: model ( 'MenuItem' ) -> highestOrderMenuItem ( ) ; if ( ! $ menuItem -> exists ) { $ menuItem -> fill ( [ 'target' => '_self' , 'icon_class' => $ bread -> dataType -> icon , 'color' => null , 'parent_id' => null , 'order' => $ order , ] ) -> save ( ) ; } } }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [[""]], "filtered_resps": [""], "doc_hash": "f1b4179acbb905f5447621e57745d061a9853f4dc9ab646a470caeab38fa104e", "prompt_hash": "7f47fec70e7e8c2e5db49355915d0a2fde07090f2192a6f01ffd94f6160e5590", "target_hash": "4fb8d7c23f7a81f4258c989c603e5c64bc4566e851dc0621aaf5a11171595429", "smoothed_bleu_4": 0.033546262790251184}
{"doc_id": 7, "doc": {"id": 7, "repo": "the-control-group/voyager", "path": "src/Database/DatabaseUpdater.php", "func_name": "DatabaseUpdater.update", "original_string": "public static function update($table)\n    {\n        if (!is_array($table)) {\n            $table = json_decode($table, true);\n        }\n\n        if (!SchemaManager::tableExists($table['oldName'])) {\n            throw SchemaException::tableDoesNotExist($table['oldName']);\n        }\n\n        $updater = new self($table);\n\n        $updater->updateTable();\n    }", "language": "php", "code": "public static function update($table)\n    {\n        if (!is_array($table)) {\n            $table = json_decode($table, true);\n        }\n\n        if (!SchemaManager::tableExists($table['oldName'])) {\n            throw SchemaException::tableDoesNotExist($table['oldName']);\n        }\n\n        $updater = new self($table);\n\n        $updater->updateTable();\n    }", "code_tokens": ["public", "static", "function", "update", "(", "$", "table", ")", "{", "if", "(", "!", "is_array", "(", "$", "table", ")", ")", "{", "$", "table", "=", "json_decode", "(", "$", "table", ",", "true", ")", ";", "}", "if", "(", "!", "SchemaManager", "::", "tableExists", "(", "$", "table", "[", "'oldName'", "]", ")", ")", "{", "throw", "SchemaException", "::", "tableDoesNotExist", "(", "$", "table", "[", "'oldName'", "]", ")", ";", "}", "$", "updater", "=", "new", "self", "(", "$", "table", ")", ";", "$", "updater", "->", "updateTable", "(", ")", ";", "}"], "docstring": "Update the table.\n\n@return void", "docstring_tokens": ["Update", "the", "table", "."], "sha": "5315b63a5d17c7de877019ac53bec5bd7fd8e12c", "url": "https://github.com/the-control-group/voyager/blob/5315b63a5d17c7de877019ac53bec5bd7fd8e12c/src/Database/DatabaseUpdater.php#L32-L45"}, "target": "Update the table .", "arguments": {"gen_args_0": {"arg_0": "public static function update ( $ table ) { if ( ! is_array ( $ table ) ) { $ table = json_decode ( $ table , true ) ; } if ( ! SchemaManager :: tableExists ( $ table [ 'oldName' ] ) ) { throw SchemaException :: tableDoesNotExist ( $ table [ 'oldName' ] ) ; } $ updater = new self ( $ table ) ; $ updater -> updateTable ( ) ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [[""]], "filtered_resps": [""], "doc_hash": "d5ce55438a263b77edd72ab74299eccceea28de2b42158749091ad6ababe7e2c", "prompt_hash": "d371fbe6440dd8e44513402719742bef185756b9a7bf52e3e896f724648c1d5f", "target_hash": "00751c3a24622fbf0827cfe6586e0ac6758ba33ffa843cc8045490c9209a6816", "smoothed_bleu_4": 1.8315638888734178}
{"doc_id": 8, "doc": {"id": 8, "repo": "the-control-group/voyager", "path": "src/Database/DatabaseUpdater.php", "func_name": "DatabaseUpdater.updateTable", "original_string": "public function updateTable()\n    {\n        // Get table new name\n        if (($newName = $this->table->getName()) != $this->originalTable->getName()) {\n            // Make sure the new name doesn't already exist\n            if (SchemaManager::tableExists($newName)) {\n                throw SchemaException::tableAlreadyExists($newName);\n            }\n        } else {\n            $newName = false;\n        }\n\n        // Rename columns\n        if ($renamedColumnsDiff = $this->getRenamedColumnsDiff()) {\n            SchemaManager::alterTable($renamedColumnsDiff);\n\n            // Refresh original table after renaming the columns\n            $this->originalTable = SchemaManager::listTableDetails($this->tableArr['oldName']);\n        }\n\n        $tableDiff = $this->originalTable->diff($this->table);\n\n        // Add new table name to tableDiff\n        if ($newName) {\n            if (!$tableDiff) {\n                $tableDiff = new TableDiff($this->tableArr['oldName']);\n                $tableDiff->fromTable = $this->originalTable;\n            }\n\n            $tableDiff->newName = $newName;\n        }\n\n        // Update the table\n        if ($tableDiff) {\n            SchemaManager::alterTable($tableDiff);\n        }\n    }", "language": "php", "code": "public function updateTable()\n    {\n        // Get table new name\n        if (($newName = $this->table->getName()) != $this->originalTable->getName()) {\n            // Make sure the new name doesn't already exist\n            if (SchemaManager::tableExists($newName)) {\n                throw SchemaException::tableAlreadyExists($newName);\n            }\n        } else {\n            $newName = false;\n        }\n\n        // Rename columns\n        if ($renamedColumnsDiff = $this->getRenamedColumnsDiff()) {\n            SchemaManager::alterTable($renamedColumnsDiff);\n\n            // Refresh original table after renaming the columns\n            $this->originalTable = SchemaManager::listTableDetails($this->tableArr['oldName']);\n        }\n\n        $tableDiff = $this->originalTable->diff($this->table);\n\n        // Add new table name to tableDiff\n        if ($newName) {\n            if (!$tableDiff) {\n                $tableDiff = new TableDiff($this->tableArr['oldName']);\n                $tableDiff->fromTable = $this->originalTable;\n            }\n\n            $tableDiff->newName = $newName;\n        }\n\n        // Update the table\n        if ($tableDiff) {\n            SchemaManager::alterTable($tableDiff);\n        }\n    }", "code_tokens": ["public", "function", "updateTable", "(", ")", "{", "// Get table new name", "if", "(", "(", "$", "newName", "=", "$", "this", "->", "table", "->", "getName", "(", ")", ")", "!=", "$", "this", "->", "originalTable", "->", "getName", "(", ")", ")", "{", "// Make sure the new name doesn't already exist", "if", "(", "SchemaManager", "::", "tableExists", "(", "$", "newName", ")", ")", "{", "throw", "SchemaException", "::", "tableAlreadyExists", "(", "$", "newName", ")", ";", "}", "}", "else", "{", "$", "newName", "=", "false", ";", "}", "// Rename columns", "if", "(", "$", "renamedColumnsDiff", "=", "$", "this", "->", "getRenamedColumnsDiff", "(", ")", ")", "{", "SchemaManager", "::", "alterTable", "(", "$", "renamedColumnsDiff", ")", ";", "// Refresh original table after renaming the columns", "$", "this", "->", "originalTable", "=", "SchemaManager", "::", "listTableDetails", "(", "$", "this", "->", "tableArr", "[", "'oldName'", "]", ")", ";", "}", "$", "tableDiff", "=", "$", "this", "->", "originalTable", "->", "diff", "(", "$", "this", "->", "table", ")", ";", "// Add new table name to tableDiff", "if", "(", "$", "newName", ")", "{", "if", "(", "!", "$", "tableDiff", ")", "{", "$", "tableDiff", "=", "new", "TableDiff", "(", "$", "this", "->", "tableArr", "[", "'oldName'", "]", ")", ";", "$", "tableDiff", "->", "fromTable", "=", "$", "this", "->", "originalTable", ";", "}", "$", "tableDiff", "->", "newName", "=", "$", "newName", ";", "}", "// Update the table", "if", "(", "$", "tableDiff", ")", "{", "SchemaManager", "::", "alterTable", "(", "$", "tableDiff", ")", ";", "}", "}"], "docstring": "Updates the table.\n\n@return void", "docstring_tokens": ["Updates", "the", "table", "."], "sha": "5315b63a5d17c7de877019ac53bec5bd7fd8e12c", "url": "https://github.com/the-control-group/voyager/blob/5315b63a5d17c7de877019ac53bec5bd7fd8e12c/src/Database/DatabaseUpdater.php#L52-L88"}, "target": "Updates the table .", "arguments": {"gen_args_0": {"arg_0": "public function updateTable ( ) { // Get table new name if ( ( $ newName = $ this -> table -> getName ( ) ) != $ this -> originalTable -> getName ( ) ) { // Make sure the new name doesn't already exist if ( SchemaManager :: tableExists ( $ newName ) ) { throw SchemaException :: tableAlreadyExists ( $ newName ) ; } } else { $ newName = false ; } // Rename columns if ( $ renamedColumnsDiff = $ this -> getRenamedColumnsDiff ( ) ) { SchemaManager :: alterTable ( $ renamedColumnsDiff ) ; // Refresh original table after renaming the columns $ this -> originalTable = SchemaManager :: listTableDetails ( $ this -> tableArr [ 'oldName' ] ) ; } $ tableDiff = $ this -> originalTable -> diff ( $ this -> table ) ; // Add new table name to tableDiff if ( $ newName ) { if ( ! $ tableDiff ) { $ tableDiff = new TableDiff ( $ this -> tableArr [ 'oldName' ] ) ; $ tableDiff -> fromTable = $ this -> originalTable ; } $ tableDiff -> newName = $ newName ; } // Update the table if ( $ tableDiff ) { SchemaManager :: alterTable ( $ tableDiff ) ; } }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [[""]], "filtered_resps": [""], "doc_hash": "ebb4a51d83ab5b57620754cfed03fc853170171822679c4eaeec96eee7f4b179", "prompt_hash": "4ee09389336c1f02ea16ea568e4544176ad639d4bec8ad8bcdbdb7a22fa3ad43", "target_hash": "fa5065cb1c93fcb602a1524df001b0fafabd4edb23708101e31c209ac43b35b3", "smoothed_bleu_4": 1.8315638888734178}
{"doc_id": 9, "doc": {"id": 9, "repo": "the-control-group/voyager", "path": "src/Database/DatabaseUpdater.php", "func_name": "DatabaseUpdater.getRenamedColumnsDiff", "original_string": "protected function getRenamedColumnsDiff()\n    {\n        $renamedColumns = $this->getRenamedColumns();\n\n        if (empty($renamedColumns)) {\n            return false;\n        }\n\n        $renamedColumnsDiff = new TableDiff($this->tableArr['oldName']);\n        $renamedColumnsDiff->fromTable = $this->originalTable;\n\n        foreach ($renamedColumns as $oldName => $newName) {\n            $renamedColumnsDiff->renamedColumns[$oldName] = $this->table->getColumn($newName);\n        }\n\n        return $renamedColumnsDiff;\n    }", "language": "php", "code": "protected function getRenamedColumnsDiff()\n    {\n        $renamedColumns = $this->getRenamedColumns();\n\n        if (empty($renamedColumns)) {\n            return false;\n        }\n\n        $renamedColumnsDiff = new TableDiff($this->tableArr['oldName']);\n        $renamedColumnsDiff->fromTable = $this->originalTable;\n\n        foreach ($renamedColumns as $oldName => $newName) {\n            $renamedColumnsDiff->renamedColumns[$oldName] = $this->table->getColumn($newName);\n        }\n\n        return $renamedColumnsDiff;\n    }", "code_tokens": ["protected", "function", "getRenamedColumnsDiff", "(", ")", "{", "$", "renamedColumns", "=", "$", "this", "->", "getRenamedColumns", "(", ")", ";", "if", "(", "empty", "(", "$", "renamedColumns", ")", ")", "{", "return", "false", ";", "}", "$", "renamedColumnsDiff", "=", "new", "TableDiff", "(", "$", "this", "->", "tableArr", "[", "'oldName'", "]", ")", ";", "$", "renamedColumnsDiff", "->", "fromTable", "=", "$", "this", "->", "originalTable", ";", "foreach", "(", "$", "renamedColumns", "as", "$", "oldName", "=>", "$", "newName", ")", "{", "$", "renamedColumnsDiff", "->", "renamedColumns", "[", "$", "oldName", "]", "=", "$", "this", "->", "table", "->", "getColumn", "(", "$", "newName", ")", ";", "}", "return", "$", "renamedColumnsDiff", ";", "}"], "docstring": "Get the table diff to rename columns.\n\n@return \\Doctrine\\DBAL\\Schema\\TableDiff", "docstring_tokens": ["Get", "the", "table", "diff", "to", "rename", "columns", "."], "sha": "5315b63a5d17c7de877019ac53bec5bd7fd8e12c", "url": "https://github.com/the-control-group/voyager/blob/5315b63a5d17c7de877019ac53bec5bd7fd8e12c/src/Database/DatabaseUpdater.php#L95-L111"}, "target": "Get the table diff to rename columns .", "arguments": {"gen_args_0": {"arg_0": "protected function getRenamedColumnsDiff ( ) { $ renamedColumns = $ this -> getRenamedColumns ( ) ; if ( empty ( $ renamedColumns ) ) { return false ; } $ renamedColumnsDiff = new TableDiff ( $ this -> tableArr [ 'oldName' ] ) ; $ renamedColumnsDiff -> fromTable = $ this -> originalTable ; foreach ( $ renamedColumns as $ oldName => $ newName ) { $ renamedColumnsDiff -> renamedColumns [ $ oldName ] = $ this -> table -> getColumn ( $ newName ) ; } return $ renamedColumnsDiff ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [[""]], "filtered_resps": [""], "doc_hash": "9db3800605a1ef6ba1e236ec1b0c6586a9c0a5dcbcbf0121e513494a80b42b62", "prompt_hash": "3bdc46bf0a33b51c7e78c7f2815d29e0698311fa5f8ea712c1049cdfb8919506", "target_hash": "a4c0072cbdf4b5b8a3227abf768b0544745534ed440c21a71218ebe95aab7d10", "smoothed_bleu_4": 0.033546262790251184}
{"doc_id": 10, "doc": {"id": 10, "repo": "the-control-group/voyager", "path": "src/Database/DatabaseUpdater.php", "func_name": "DatabaseUpdater.getRenamedDiff", "original_string": "protected function getRenamedDiff()\n    {\n        $renamedColumns = $this->getRenamedColumns();\n        $renamedIndexes = $this->getRenamedIndexes();\n\n        if (empty($renamedColumns) && empty($renamedIndexes)) {\n            return false;\n        }\n\n        $renamedDiff = new TableDiff($this->tableArr['oldName']);\n        $renamedDiff->fromTable = $this->originalTable;\n\n        foreach ($renamedColumns as $oldName => $newName) {\n            $renamedDiff->renamedColumns[$oldName] = $this->table->getColumn($newName);\n        }\n\n        foreach ($renamedIndexes as $oldName => $newName) {\n            $renamedDiff->renamedIndexes[$oldName] = $this->table->getIndex($newName);\n        }\n\n        return $renamedDiff;\n    }", "language": "php", "code": "protected function getRenamedDiff()\n    {\n        $renamedColumns = $this->getRenamedColumns();\n        $renamedIndexes = $this->getRenamedIndexes();\n\n        if (empty($renamedColumns) && empty($renamedIndexes)) {\n            return false;\n        }\n\n        $renamedDiff = new TableDiff($this->tableArr['oldName']);\n        $renamedDiff->fromTable = $this->originalTable;\n\n        foreach ($renamedColumns as $oldName => $newName) {\n            $renamedDiff->renamedColumns[$oldName] = $this->table->getColumn($newName);\n        }\n\n        foreach ($renamedIndexes as $oldName => $newName) {\n            $renamedDiff->renamedIndexes[$oldName] = $this->table->getIndex($newName);\n        }\n\n        return $renamedDiff;\n    }", "code_tokens": ["protected", "function", "getRenamedDiff", "(", ")", "{", "$", "renamedColumns", "=", "$", "this", "->", "getRenamedColumns", "(", ")", ";", "$", "renamedIndexes", "=", "$", "this", "->", "getRenamedIndexes", "(", ")", ";", "if", "(", "empty", "(", "$", "renamedColumns", ")", "&&", "empty", "(", "$", "renamedIndexes", ")", ")", "{", "return", "false", ";", "}", "$", "renamedDiff", "=", "new", "TableDiff", "(", "$", "this", "->", "tableArr", "[", "'oldName'", "]", ")", ";", "$", "renamedDiff", "->", "fromTable", "=", "$", "this", "->", "originalTable", ";", "foreach", "(", "$", "renamedColumns", "as", "$", "oldName", "=>", "$", "newName", ")", "{", "$", "renamedDiff", "->", "renamedColumns", "[", "$", "oldName", "]", "=", "$", "this", "->", "table", "->", "getColumn", "(", "$", "newName", ")", ";", "}", "foreach", "(", "$", "renamedIndexes", "as", "$", "oldName", "=>", "$", "newName", ")", "{", "$", "renamedDiff", "->", "renamedIndexes", "[", "$", "oldName", "]", "=", "$", "this", "->", "table", "->", "getIndex", "(", "$", "newName", ")", ";", "}", "return", "$", "renamedDiff", ";", "}"], "docstring": "Get the table diff to rename columns and indexes.\n\n@return \\Doctrine\\DBAL\\Schema\\TableDiff", "docstring_tokens": ["Get", "the", "table", "diff", "to", "rename", "columns", "and", "indexes", "."], "sha": "5315b63a5d17c7de877019ac53bec5bd7fd8e12c", "url": "https://github.com/the-control-group/voyager/blob/5315b63a5d17c7de877019ac53bec5bd7fd8e12c/src/Database/DatabaseUpdater.php#L118-L139"}, "target": "Get the table diff to rename columns and indexes .", "arguments": {"gen_args_0": {"arg_0": "protected function getRenamedDiff ( ) { $ renamedColumns = $ this -> getRenamedColumns ( ) ; $ renamedIndexes = $ this -> getRenamedIndexes ( ) ; if ( empty ( $ renamedColumns ) && empty ( $ renamedIndexes ) ) { return false ; } $ renamedDiff = new TableDiff ( $ this -> tableArr [ 'oldName' ] ) ; $ renamedDiff -> fromTable = $ this -> originalTable ; foreach ( $ renamedColumns as $ oldName => $ newName ) { $ renamedDiff -> renamedColumns [ $ oldName ] = $ this -> table -> getColumn ( $ newName ) ; } foreach ( $ renamedIndexes as $ oldName => $ newName ) { $ renamedDiff -> renamedIndexes [ $ oldName ] = $ this -> table -> getIndex ( $ newName ) ; } return $ renamedDiff ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [[""]], "filtered_resps": [""], "doc_hash": "23b85747fa6b63483e385a206dea69afdcd49f5a61e06aff0df6571e871d270f", "prompt_hash": "6902f3e8b96275fa83345486d67d8fb30228364ddeea44eebb67271578ee33ce", "target_hash": "9aefa12505e52a4430ff53eeb22c44791365fb5eea0a29b69f8b39f9e5f9dbf8", "smoothed_bleu_4": 0.004539992976248485}
{"doc_id": 11, "doc": {"id": 11, "repo": "the-control-group/voyager", "path": "src/Database/DatabaseUpdater.php", "func_name": "DatabaseUpdater.getRenamedColumns", "original_string": "protected function getRenamedColumns()\n    {\n        $renamedColumns = [];\n\n        foreach ($this->tableArr['columns'] as $column) {\n            $oldName = $column['oldName'];\n\n            // make sure this is an existing column and not a new one\n            if ($this->originalTable->hasColumn($oldName)) {\n                $name = $column['name'];\n\n                if ($name != $oldName) {\n                    $renamedColumns[$oldName] = $name;\n                }\n            }\n        }\n\n        return $renamedColumns;\n    }", "language": "php", "code": "protected function getRenamedColumns()\n    {\n        $renamedColumns = [];\n\n        foreach ($this->tableArr['columns'] as $column) {\n            $oldName = $column['oldName'];\n\n            // make sure this is an existing column and not a new one\n            if ($this->originalTable->hasColumn($oldName)) {\n                $name = $column['name'];\n\n                if ($name != $oldName) {\n                    $renamedColumns[$oldName] = $name;\n                }\n            }\n        }\n\n        return $renamedColumns;\n    }", "code_tokens": ["protected", "function", "getRenamedColumns", "(", ")", "{", "$", "renamedColumns", "=", "[", "]", ";", "foreach", "(", "$", "this", "->", "tableArr", "[", "'columns'", "]", "as", "$", "column", ")", "{", "$", "oldName", "=", "$", "column", "[", "'oldName'", "]", ";", "// make sure this is an existing column and not a new one", "if", "(", "$", "this", "->", "originalTable", "->", "hasColumn", "(", "$", "oldName", ")", ")", "{", "$", "name", "=", "$", "column", "[", "'name'", "]", ";", "if", "(", "$", "name", "!=", "$", "oldName", ")", "{", "$", "renamedColumns", "[", "$", "oldName", "]", "=", "$", "name", ";", "}", "}", "}", "return", "$", "renamedColumns", ";", "}"], "docstring": "Get columns that were renamed.\n\n@return array", "docstring_tokens": ["Get", "columns", "that", "were", "renamed", "."], "sha": "5315b63a5d17c7de877019ac53bec5bd7fd8e12c", "url": "https://github.com/the-control-group/voyager/blob/5315b63a5d17c7de877019ac53bec5bd7fd8e12c/src/Database/DatabaseUpdater.php#L146-L164"}, "target": "Get columns that were renamed .", "arguments": {"gen_args_0": {"arg_0": "protected function getRenamedColumns ( ) { $ renamedColumns = [ ] ; foreach ( $ this -> tableArr [ 'columns' ] as $ column ) { $ oldName = $ column [ 'oldName' ] ; // make sure this is an existing column and not a new one if ( $ this -> originalTable -> hasColumn ( $ oldName ) ) { $ name = $ column [ 'name' ] ; if ( $ name != $ oldName ) { $ renamedColumns [ $ oldName ] = $ name ; } } } return $ renamedColumns ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [[""]], "filtered_resps": [""], "doc_hash": "6b3a55ef7e9f453ea2fc315051c108c30aedb76f1a2e355f6a6f1c952033177c", "prompt_hash": "b7f419bfb14fce8a5a356866e7c22833896e20fb8b747416a693270735e08c47", "target_hash": "557eb70dd936c6d080c14c1134b6bd32a1e62dc8feb8cfcef1cbe3e96a3ebd77", "smoothed_bleu_4": 0.24787521766663584}
{"doc_id": 12, "doc": {"id": 12, "repo": "the-control-group/voyager", "path": "src/Database/DatabaseUpdater.php", "func_name": "DatabaseUpdater.getRenamedIndexes", "original_string": "protected function getRenamedIndexes()\n    {\n        $renamedIndexes = [];\n\n        foreach ($this->tableArr['indexes'] as $index) {\n            $oldName = $index['oldName'];\n\n            // make sure this is an existing index and not a new one\n            if ($this->originalTable->hasIndex($oldName)) {\n                $name = $index['name'];\n\n                if ($name != $oldName) {\n                    $renamedIndexes[$oldName] = $name;\n                }\n            }\n        }\n\n        return $renamedIndexes;\n    }", "language": "php", "code": "protected function getRenamedIndexes()\n    {\n        $renamedIndexes = [];\n\n        foreach ($this->tableArr['indexes'] as $index) {\n            $oldName = $index['oldName'];\n\n            // make sure this is an existing index and not a new one\n            if ($this->originalTable->hasIndex($oldName)) {\n                $name = $index['name'];\n\n                if ($name != $oldName) {\n                    $renamedIndexes[$oldName] = $name;\n                }\n            }\n        }\n\n        return $renamedIndexes;\n    }", "code_tokens": ["protected", "function", "getRenamedIndexes", "(", ")", "{", "$", "renamedIndexes", "=", "[", "]", ";", "foreach", "(", "$", "this", "->", "tableArr", "[", "'indexes'", "]", "as", "$", "index", ")", "{", "$", "oldName", "=", "$", "index", "[", "'oldName'", "]", ";", "// make sure this is an existing index and not a new one", "if", "(", "$", "this", "->", "originalTable", "->", "hasIndex", "(", "$", "oldName", ")", ")", "{", "$", "name", "=", "$", "index", "[", "'name'", "]", ";", "if", "(", "$", "name", "!=", "$", "oldName", ")", "{", "$", "renamedIndexes", "[", "$", "oldName", "]", "=", "$", "name", ";", "}", "}", "}", "return", "$", "renamedIndexes", ";", "}"], "docstring": "Get indexes that were renamed.\n\n@return array", "docstring_tokens": ["Get", "indexes", "that", "were", "renamed", "."], "sha": "5315b63a5d17c7de877019ac53bec5bd7fd8e12c", "url": "https://github.com/the-control-group/voyager/blob/5315b63a5d17c7de877019ac53bec5bd7fd8e12c/src/Database/DatabaseUpdater.php#L171-L189"}, "target": "Get indexes that were renamed .", "arguments": {"gen_args_0": {"arg_0": "protected function getRenamedIndexes ( ) { $ renamedIndexes = [ ] ; foreach ( $ this -> tableArr [ 'indexes' ] as $ index ) { $ oldName = $ index [ 'oldName' ] ; // make sure this is an existing index and not a new one if ( $ this -> originalTable -> hasIndex ( $ oldName ) ) { $ name = $ index [ 'name' ] ; if ( $ name != $ oldName ) { $ renamedIndexes [ $ oldName ] = $ name ; } } } return $ renamedIndexes ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [[""]], "filtered_resps": [""], "doc_hash": "f449d4b58c47aca9b60643dfd7c770490177779d6c0a68bedc464879c2e6bcba", "prompt_hash": "298afc764d422a99ea9bdf2b7099f086fb85653c624dd4993b6446f9c8f559cc", "target_hash": "b562bc4883cc988c17817cbdbc1f2aae6fcc02cbf0435d9d88aaec6f35fe017e", "smoothed_bleu_4": 0.24787521766663584}
{"doc_id": 13, "doc": {"id": 13, "repo": "the-control-group/voyager", "path": "src/Traits/Resizable.php", "func_name": "Resizable.thumbnail", "original_string": "public function thumbnail($type, $attribute = 'image')\n    {\n        // Return empty string if the field not found\n        if (!isset($this->attributes[$attribute])) {\n            return '';\n        }\n\n        // We take image from posts field\n        $image = $this->attributes[$attribute];\n\n        return $this->getThumbnail($image, $type);\n    }", "language": "php", "code": "public function thumbnail($type, $attribute = 'image')\n    {\n        // Return empty string if the field not found\n        if (!isset($this->attributes[$attribute])) {\n            return '';\n        }\n\n        // We take image from posts field\n        $image = $this->attributes[$attribute];\n\n        return $this->getThumbnail($image, $type);\n    }", "code_tokens": ["public", "function", "thumbnail", "(", "$", "type", ",", "$", "attribute", "=", "'image'", ")", "{", "// Return empty string if the field not found", "if", "(", "!", "isset", "(", "$", "this", "->", "attributes", "[", "$", "attribute", "]", ")", ")", "{", "return", "''", ";", "}", "// We take image from posts field", "$", "image", "=", "$", "this", "->", "attributes", "[", "$", "attribute", "]", ";", "return", "$", "this", "->", "getThumbnail", "(", "$", "image", ",", "$", "type", ")", ";", "}"], "docstring": "Method for returning specific thumbnail for model.\n\n@param string $type\n@param string $attribute\n\n@return string", "docstring_tokens": ["Method", "for", "returning", "specific", "thumbnail", "for", "model", "."], "sha": "5315b63a5d17c7de877019ac53bec5bd7fd8e12c", "url": "https://github.com/the-control-group/voyager/blob/5315b63a5d17c7de877019ac53bec5bd7fd8e12c/src/Traits/Resizable.php#L17-L28"}, "target": "Method for returning specific thumbnail for model .", "arguments": {"gen_args_0": {"arg_0": "public function thumbnail ( $ type , $ attribute = 'image' ) { // Return empty string if the field not found if ( ! isset ( $ this -> attributes [ $ attribute ] ) ) { return '' ; } // We take image from posts field $ image = $ this -> attributes [ $ attribute ] ; return $ this -> getThumbnail ( $ image , $ type ) ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [[""]], "filtered_resps": [""], "doc_hash": "7a48ee16059825bac6ea1730375328ddcf23d2f11466aec89a729c2c063c7dc6", "prompt_hash": "cc0dac766ea68febe0bced2f8cc0a3f62d23f586caec4fc02ee7f681905e8d0c", "target_hash": "0341d7b11d3bb555a0cde98078d9aae36569c06b71b8a32248edf6471db5ffb5", "smoothed_bleu_4": 0.033546262790251184}
{"doc_id": 14, "doc": {"id": 14, "repo": "the-control-group/voyager", "path": "src/Traits/Resizable.php", "func_name": "Resizable.getThumbnail", "original_string": "public function getThumbnail($image, $type)\n    {\n        // We need to get extension type ( .jpeg , .png ...)\n        $ext = pathinfo($image, PATHINFO_EXTENSION);\n\n        // We remove extension from file name so we can append thumbnail type\n        $name = Str::replaceLast('.'.$ext, '', $image);\n\n        // We merge original name + type + extension\n        return $name.'-'.$type.'.'.$ext;\n    }", "language": "php", "code": "public function getThumbnail($image, $type)\n    {\n        // We need to get extension type ( .jpeg , .png ...)\n        $ext = pathinfo($image, PATHINFO_EXTENSION);\n\n        // We remove extension from file name so we can append thumbnail type\n        $name = Str::replaceLast('.'.$ext, '', $image);\n\n        // We merge original name + type + extension\n        return $name.'-'.$type.'.'.$ext;\n    }", "code_tokens": ["public", "function", "getThumbnail", "(", "$", "image", ",", "$", "type", ")", "{", "// We need to get extension type ( .jpeg , .png ...)", "$", "ext", "=", "pathinfo", "(", "$", "image", ",", "PATHINFO_EXTENSION", ")", ";", "// We remove extension from file name so we can append thumbnail type", "$", "name", "=", "Str", "::", "replaceLast", "(", "'.'", ".", "$", "ext", ",", "''", ",", "$", "image", ")", ";", "// We merge original name + type + extension", "return", "$", "name", ".", "'-'", ".", "$", "type", ".", "'.'", ".", "$", "ext", ";", "}"], "docstring": "Generate thumbnail URL.\n\n@param $image\n@param $type\n\n@return string", "docstring_tokens": ["Generate", "thumbnail", "URL", "."], "sha": "5315b63a5d17c7de877019ac53bec5bd7fd8e12c", "url": "https://github.com/the-control-group/voyager/blob/5315b63a5d17c7de877019ac53bec5bd7fd8e12c/src/Traits/Resizable.php#L38-L48"}, "target": "Generate thumbnail URL .", "arguments": {"gen_args_0": {"arg_0": "public function getThumbnail ( $ image , $ type ) { // We need to get extension type ( .jpeg , .png ...) $ ext = pathinfo ( $ image , PATHINFO_EXTENSION ) ; // We remove extension from file name so we can append thumbnail type $ name = Str :: replaceLast ( '.' . $ ext , '' , $ image ) ; // We merge original name + type + extension return $ name . '-' . $ type . '.' . $ ext ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [[""]], "filtered_resps": [""], "doc_hash": "a26e258ea6b3a0d5331cd58ed01d29412229f83f8040915499408bb8388128d8", "prompt_hash": "5ae2576ccae1e9d43414151ae8006f2e9dc8ec5faa636bc7fa9bf52f5d6ccf72", "target_hash": "4f21d749e914d838e650dd759637a55c97ae6db051943db6964f646982bd454f", "smoothed_bleu_4": 1.8315638888734178}
{"doc_id": 15, "doc": {"id": 15, "repo": "the-control-group/voyager", "path": "src/Policies/UserPolicy.php", "func_name": "UserPolicy.editRoles", "original_string": "public function editRoles(User $user, $model)\n    {\n        // Does this record belong to another user?\n        $another = $user->id != $model->id;\n\n        return $another && $user->hasPermission('edit_users');\n    }", "language": "php", "code": "public function editRoles(User $user, $model)\n    {\n        // Does this record belong to another user?\n        $another = $user->id != $model->id;\n\n        return $another && $user->hasPermission('edit_users');\n    }", "code_tokens": ["public", "function", "editRoles", "(", "User", "$", "user", ",", "$", "model", ")", "{", "// Does this record belong to another user?", "$", "another", "=", "$", "user", "->", "id", "!=", "$", "model", "->", "id", ";", "return", "$", "another", "&&", "$", "user", "->", "hasPermission", "(", "'edit_users'", ")", ";", "}"], "docstring": "Determine if the given user can change a user a role.\n\n@param \\TCG\\Voyager\\Contracts\\User $user\n@param  $model\n\n@return bool", "docstring_tokens": ["Determine", "if", "the", "given", "user", "can", "change", "a", "user", "a", "role", "."], "sha": "5315b63a5d17c7de877019ac53bec5bd7fd8e12c", "url": "https://github.com/the-control-group/voyager/blob/5315b63a5d17c7de877019ac53bec5bd7fd8e12c/src/Policies/UserPolicy.php#L49-L55"}, "target": "Determine if the given user can change a user a role .", "arguments": {"gen_args_0": {"arg_0": "public function editRoles ( User $ user , $ model ) { // Does this record belong to another user? $ another = $ user -> id != $ model -> id ; return $ another && $ user -> hasPermission ( 'edit_users' ) ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [["## What is the difference between a role and a permission?"]], "filtered_resps": ["## What is the difference between a role and a permission?"], "doc_hash": "19d0db7def4784a09efc30043256493e4ba99f7d1d92992ef483d14a768e042c", "prompt_hash": "8f17fcead8f4606e6d53ad7ce2d2f68ce74f3594af0c407becff44b3978d04f2", "target_hash": "77ad065e00be980263706b74a570843b93b4747ce2ad28d163ab0e3074ee0fe2", "smoothed_bleu_4": 13.761232669480913}
{"doc_id": 16, "doc": {"id": 16, "repo": "the-control-group/voyager", "path": "src/Voyager.php", "func_name": "Voyager.dimmers", "original_string": "public function dimmers()\n    {\n        $widgetClasses = config('voyager.dashboard.widgets');\n        $dimmers = Widget::group('voyager::dimmers');\n\n        foreach ($widgetClasses as $widgetClass) {\n            $widget = app($widgetClass);\n\n            if ($widget->shouldBeDisplayed()) {\n                $dimmers->addWidget($widgetClass);\n            }\n        }\n\n        return $dimmers;\n    }", "language": "php", "code": "public function dimmers()\n    {\n        $widgetClasses = config('voyager.dashboard.widgets');\n        $dimmers = Widget::group('voyager::dimmers');\n\n        foreach ($widgetClasses as $widgetClass) {\n            $widget = app($widgetClass);\n\n            if ($widget->shouldBeDisplayed()) {\n                $dimmers->addWidget($widgetClass);\n            }\n        }\n\n        return $dimmers;\n    }", "code_tokens": ["public", "function", "dimmers", "(", ")", "{", "$", "widgetClasses", "=", "config", "(", "'voyager.dashboard.widgets'", ")", ";", "$", "dimmers", "=", "Widget", "::", "group", "(", "'voyager::dimmers'", ")", ";", "foreach", "(", "$", "widgetClasses", "as", "$", "widgetClass", ")", "{", "$", "widget", "=", "app", "(", "$", "widgetClass", ")", ";", "if", "(", "$", "widget", "->", "shouldBeDisplayed", "(", ")", ")", "{", "$", "dimmers", "->", "addWidget", "(", "$", "widgetClass", ")", ";", "}", "}", "return", "$", "dimmers", ";", "}"], "docstring": "Get a collection of the dashboard widgets.\n\n@return \\Arrilot\\Widgets\\WidgetGroup", "docstring_tokens": ["Get", "a", "collection", "of", "the", "dashboard", "widgets", "."], "sha": "5315b63a5d17c7de877019ac53bec5bd7fd8e12c", "url": "https://github.com/the-control-group/voyager/blob/5315b63a5d17c7de877019ac53bec5bd7fd8e12c/src/Voyager.php#L189-L203"}, "target": "Get a collection of the dashboard widgets .", "arguments": {"gen_args_0": {"arg_0": "public function dimmers ( ) { $ widgetClasses = config ( 'voyager.dashboard.widgets' ) ; $ dimmers = Widget :: group ( 'voyager::dimmers' ) ; foreach ( $ widgetClasses as $ widgetClass ) { $ widget = app ( $ widgetClass ) ; if ( $ widget -> shouldBeDisplayed ( ) ) { $ dimmers -> addWidget ( $ widgetClass ) ; } } return $ dimmers ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [[""]], "filtered_resps": [""], "doc_hash": "b78418c6c9496338ac10df4cc88fab423eadf69b0b04f321d283af6b7c27f481", "prompt_hash": "8aaa73926dafe37979c99cdf466cd11df13018d44065628224f259d13c4cb3bb", "target_hash": "e94e31ee42131c2b64e7780dac38e27cc8ad00f50388a21ab30d917a6af84d24", "smoothed_bleu_4": 0.033546262790251184}
{"doc_id": 17, "doc": {"id": 17, "repo": "the-control-group/voyager", "path": "src/Http/Controllers/VoyagerMenuController.php", "func_name": "VoyagerMenuController.prepareMenuTranslations", "original_string": "protected function prepareMenuTranslations(&$data)\n    {\n        $trans = json_decode($data['title_i18n'], true);\n\n        // Set field value with the default locale\n        $data['title'] = $trans[config('voyager.multilingual.default', 'en')];\n\n        unset($data['title_i18n']);     // Remove hidden input holding translations\n        unset($data['i18n_selector']);  // Remove language selector input radio\n\n        return $trans;\n    }", "language": "php", "code": "protected function prepareMenuTranslations(&$data)\n    {\n        $trans = json_decode($data['title_i18n'], true);\n\n        // Set field value with the default locale\n        $data['title'] = $trans[config('voyager.multilingual.default', 'en')];\n\n        unset($data['title_i18n']);     // Remove hidden input holding translations\n        unset($data['i18n_selector']);  // Remove language selector input radio\n\n        return $trans;\n    }", "code_tokens": ["protected", "function", "prepareMenuTranslations", "(", "&", "$", "data", ")", "{", "$", "trans", "=", "json_decode", "(", "$", "data", "[", "'title_i18n'", "]", ",", "true", ")", ";", "// Set field value with the default locale", "$", "data", "[", "'title'", "]", "=", "$", "trans", "[", "config", "(", "'voyager.multilingual.default'", ",", "'en'", ")", "]", ";", "unset", "(", "$", "data", "[", "'title_i18n'", "]", ")", ";", "// Remove hidden input holding translations", "unset", "(", "$", "data", "[", "'i18n_selector'", "]", ")", ";", "// Remove language selector input radio", "return", "$", "trans", ";", "}"], "docstring": "Prepare menu translations.\n\n@param array $data menu data\n\n@return JSON translated item", "docstring_tokens": ["Prepare", "menu", "translations", "."], "sha": "5315b63a5d17c7de877019ac53bec5bd7fd8e12c", "url": "https://github.com/the-control-group/voyager/blob/5315b63a5d17c7de877019ac53bec5bd7fd8e12c/src/Http/Controllers/VoyagerMenuController.php#L150-L161"}, "target": "Prepare menu translations .", "arguments": {"gen_args_0": {"arg_0": "protected function prepareMenuTranslations ( & $ data ) { $ trans = json_decode ( $ data [ 'title_i18n' ] , true ) ; // Set field value with the default locale $ data [ 'title' ] = $ trans [ config ( 'voyager.multilingual.default' , 'en' ) ] ; unset ( $ data [ 'title_i18n' ] ) ; // Remove hidden input holding translations unset ( $ data [ 'i18n_selector' ] ) ; // Remove language selector input radio return $ trans ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [[""]], "filtered_resps": [""], "doc_hash": "030592ab7ca56d57ae181a2fc6b141df5aec060de7223547b57510154a704704", "prompt_hash": "94c12a7660a759a6167c6b68d7aef471d88d8e7cd9da0a84729634b4c1db170d", "target_hash": "ab283e75dbeee1219d34ea99eb21fbeb51e295ae45137e3ded643805877883e8", "smoothed_bleu_4": 1.8315638888734178}
{"doc_id": 18, "doc": {"id": 18, "repo": "the-control-group/voyager", "path": "src/Translator.php", "func_name": "Translator.save", "original_string": "public function save()\n    {\n        $attributes = $this->getModifiedAttributes();\n        $savings = [];\n\n        foreach ($attributes as $key => $attribute) {\n            if ($attribute['exists']) {\n                $translation = $this->getTranslationModel($key);\n            } else {\n                $translation = VoyagerFacade::model('Translation')->where('table_name', $this->model->getTable())\n                    ->where('column_name', $key)\n                    ->where('foreign_key', $this->model->getKey())\n                    ->where('locale', $this->locale)\n                    ->first();\n            }\n\n            if (is_null($translation)) {\n                $translation = VoyagerFacade::model('Translation');\n            }\n\n            $translation->fill([\n                'table_name'  => $this->model->getTable(),\n                'column_name' => $key,\n                'foreign_key' => $this->model->getKey(),\n                'value'       => $attribute['value'],\n                'locale'      => $this->locale,\n            ]);\n\n            $savings[] = $translation->save();\n\n            $this->attributes[$key]['locale'] = $this->locale;\n            $this->attributes[$key]['exists'] = true;\n            $this->attributes[$key]['modified'] = false;\n        }\n\n        return in_array(false, $savings);\n    }", "language": "php", "code": "public function save()\n    {\n        $attributes = $this->getModifiedAttributes();\n        $savings = [];\n\n        foreach ($attributes as $key => $attribute) {\n            if ($attribute['exists']) {\n                $translation = $this->getTranslationModel($key);\n            } else {\n                $translation = VoyagerFacade::model('Translation')->where('table_name', $this->model->getTable())\n                    ->where('column_name', $key)\n                    ->where('foreign_key', $this->model->getKey())\n                    ->where('locale', $this->locale)\n                    ->first();\n            }\n\n            if (is_null($translation)) {\n                $translation = VoyagerFacade::model('Translation');\n            }\n\n            $translation->fill([\n                'table_name'  => $this->model->getTable(),\n                'column_name' => $key,\n                'foreign_key' => $this->model->getKey(),\n                'value'       => $attribute['value'],\n                'locale'      => $this->locale,\n            ]);\n\n            $savings[] = $translation->save();\n\n            $this->attributes[$key]['locale'] = $this->locale;\n            $this->attributes[$key]['exists'] = true;\n            $this->attributes[$key]['modified'] = false;\n        }\n\n        return in_array(false, $savings);\n    }", "code_tokens": ["public", "function", "save", "(", ")", "{", "$", "attributes", "=", "$", "this", "->", "getModifiedAttributes", "(", ")", ";", "$", "savings", "=", "[", "]", ";", "foreach", "(", "$", "attributes", "as", "$", "key", "=>", "$", "attribute", ")", "{", "if", "(", "$", "attribute", "[", "'exists'", "]", ")", "{", "$", "translation", "=", "$", "this", "->", "getTranslationModel", "(", "$", "key", ")", ";", "}", "else", "{", "$", "translation", "=", "VoyagerFacade", "::", "model", "(", "'Translation'", ")", "->", "where", "(", "'table_name'", ",", "$", "this", "->", "model", "->", "getTable", "(", ")", ")", "->", "where", "(", "'column_name'", ",", "$", "key", ")", "->", "where", "(", "'foreign_key'", ",", "$", "this", "->", "model", "->", "getKey", "(", ")", ")", "->", "where", "(", "'locale'", ",", "$", "this", "->", "locale", ")", "->", "first", "(", ")", ";", "}", "if", "(", "is_null", "(", "$", "translation", ")", ")", "{", "$", "translation", "=", "VoyagerFacade", "::", "model", "(", "'Translation'", ")", ";", "}", "$", "translation", "->", "fill", "(", "[", "'table_name'", "=>", "$", "this", "->", "model", "->", "getTable", "(", ")", ",", "'column_name'", "=>", "$", "key", ",", "'foreign_key'", "=>", "$", "this", "->", "model", "->", "getKey", "(", ")", ",", "'value'", "=>", "$", "attribute", "[", "'value'", "]", ",", "'locale'", "=>", "$", "this", "->", "locale", ",", "]", ")", ";", "$", "savings", "[", "]", "=", "$", "translation", "->", "save", "(", ")", ";", "$", "this", "->", "attributes", "[", "$", "key", "]", "[", "'locale'", "]", "=", "$", "this", "->", "locale", ";", "$", "this", "->", "attributes", "[", "$", "key", "]", "[", "'exists'", "]", "=", "true", ";", "$", "this", "->", "attributes", "[", "$", "key", "]", "[", "'modified'", "]", "=", "false", ";", "}", "return", "in_array", "(", "false", ",", "$", "savings", ")", ";", "}"], "docstring": "Save changes made to the translator attributes.\n\n@return bool", "docstring_tokens": ["Save", "changes", "made", "to", "the", "translator", "attributes", "."], "sha": "5315b63a5d17c7de877019ac53bec5bd7fd8e12c", "url": "https://github.com/the-control-group/voyager/blob/5315b63a5d17c7de877019ac53bec5bd7fd8e12c/src/Translator.php#L54-L90"}, "target": "Save changes made to the translator attributes .", "arguments": {"gen_args_0": {"arg_0": "public function save ( ) { $ attributes = $ this -> getModifiedAttributes ( ) ; $ savings = [ ] ; foreach ( $ attributes as $ key => $ attribute ) { if ( $ attribute [ 'exists' ] ) { $ translation = $ this -> getTranslationModel ( $ key ) ; } else { $ translation = VoyagerFacade :: model ( 'Translation' ) -> where ( 'table_name' , $ this -> model -> getTable ( ) ) -> where ( 'column_name' , $ key ) -> where ( 'foreign_key' , $ this -> model -> getKey ( ) ) -> where ( 'locale' , $ this -> locale ) -> first ( ) ; } if ( is_null ( $ translation ) ) { $ translation = VoyagerFacade :: model ( 'Translation' ) ; } $ translation -> fill ( [ 'table_name' => $ this -> model -> getTable ( ) , 'column_name' => $ key , 'foreign_key' => $ this -> model -> getKey ( ) , 'value' => $ attribute [ 'value' ] , 'locale' => $ this -> locale , ] ) ; $ savings [ ] = $ translation -> save ( ) ; $ this -> attributes [ $ key ] [ 'locale' ] = $ this -> locale ; $ this -> attributes [ $ key ] [ 'exists' ] = true ; $ this -> attributes [ $ key ] [ 'modified' ] = false ; } return in_array ( false , $ savings ) ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [[""]], "filtered_resps": [""], "doc_hash": "11cd84aee312f33359a9d23245e0ef642af2bfd4370ca25a1168c5868251b32e", "prompt_hash": "056ec171cf975a794a850f476d897d702b1068618034fc9871a9abc6b83d41f7", "target_hash": "c743b08f409ed7adf49c63dda9fd97d5d64f4b9bd74f449e3ee29ca5b12947ee", "smoothed_bleu_4": 0.033546262790251184}
{"doc_id": 19, "doc": {"id": 19, "repo": "the-control-group/voyager", "path": "src/Policies/PostPolicy.php", "func_name": "PostPolicy.read", "original_string": "public function read(User $user, $model)\n    {\n        // Does this post belong to the current user?\n        $current = $user->id === $model->author_id;\n\n        return $current || $this->checkPermission($user, $model, 'read');\n    }", "language": "php", "code": "public function read(User $user, $model)\n    {\n        // Does this post belong to the current user?\n        $current = $user->id === $model->author_id;\n\n        return $current || $this->checkPermission($user, $model, 'read');\n    }", "code_tokens": ["public", "function", "read", "(", "User", "$", "user", ",", "$", "model", ")", "{", "// Does this post belong to the current user?", "$", "current", "=", "$", "user", "->", "id", "===", "$", "model", "->", "author_id", ";", "return", "$", "current", "||", "$", "this", "->", "checkPermission", "(", "$", "user", ",", "$", "model", ",", "'read'", ")", ";", "}"], "docstring": "Determine if the given model can be viewed by the user.\n\n@param \\TCG\\Voyager\\Contracts\\User $user\n@param  $model\n\n@return bool", "docstring_tokens": ["Determine", "if", "the", "given", "model", "can", "be", "viewed", "by", "the", "user", "."], "sha": "5315b63a5d17c7de877019ac53bec5bd7fd8e12c", "url": "https://github.com/the-control-group/voyager/blob/5315b63a5d17c7de877019ac53bec5bd7fd8e12c/src/Policies/PostPolicy.php#L17-L23"}, "target": "Determine if the given model can be viewed by the user .", "arguments": {"gen_args_0": {"arg_0": "public function read ( User $ user , $ model ) { // Does this post belong to the current user? $ current = $ user -> id === $ model -> author_id ; return $ current || $ this -> checkPermission ( $ user , $ model , 'read' ) ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [["## What is the difference between read and write permission in Linux?"]], "filtered_resps": ["## What is the difference between read and write permission in Linux?"], "doc_hash": "3df3ac25377a130384337fe02f9ca645520c103df33d8ca73de4670350372c44", "prompt_hash": "7a25ed2bca06211996ab967c1be44a6c79c8a2f2d747434e37350cbc67b68c45", "target_hash": "3301530fe4c808772ecb9aeaa76240d6d4ec4b4b3c2b6a423aad87fedadb8be5", "smoothed_bleu_4": 7.562316203317586}
