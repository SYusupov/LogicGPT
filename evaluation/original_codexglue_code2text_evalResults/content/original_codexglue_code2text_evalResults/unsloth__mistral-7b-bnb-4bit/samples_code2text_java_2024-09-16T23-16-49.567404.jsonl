{"doc_id": 0, "doc": {"id": 0, "repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/internal/observers/QueueDrainObserver.java", "func_name": "QueueDrainObserver.fastPathOrderedEmit", "original_string": "protected final void fastPathOrderedEmit(U value, boolean delayError, Disposable disposable) {\n        final Observer<? super V> observer = downstream;\n        final SimplePlainQueue<U> q = queue;\n\n        if (wip.get() == 0 && wip.compareAndSet(0, 1)) {\n            if (q.isEmpty()) {\n                accept(observer, value);\n                if (leave(-1) == 0) {\n                    return;\n                }\n            } else {\n                q.offer(value);\n            }\n        } else {\n            q.offer(value);\n            if (!enter()) {\n                return;\n            }\n        }\n        QueueDrainHelper.drainLoop(q, observer, delayError, disposable, this);\n    }", "language": "java", "code": "protected final void fastPathOrderedEmit(U value, boolean delayError, Disposable disposable) {\n        final Observer<? super V> observer = downstream;\n        final SimplePlainQueue<U> q = queue;\n\n        if (wip.get() == 0 && wip.compareAndSet(0, 1)) {\n            if (q.isEmpty()) {\n                accept(observer, value);\n                if (leave(-1) == 0) {\n                    return;\n                }\n            } else {\n                q.offer(value);\n            }\n        } else {\n            q.offer(value);\n            if (!enter()) {\n                return;\n            }\n        }\n        QueueDrainHelper.drainLoop(q, observer, delayError, disposable, this);\n    }", "code_tokens": ["protected", "final", "void", "fastPathOrderedEmit", "(", "U", "value", ",", "boolean", "delayError", ",", "Disposable", "disposable", ")", "{", "final", "Observer", "<", "?", "super", "V", ">", "observer", "=", "downstream", ";", "final", "SimplePlainQueue", "<", "U", ">", "q", "=", "queue", ";", "if", "(", "wip", ".", "get", "(", ")", "==", "0", "&&", "wip", ".", "compareAndSet", "(", "0", ",", "1", ")", ")", "{", "if", "(", "q", ".", "isEmpty", "(", ")", ")", "{", "accept", "(", "observer", ",", "value", ")", ";", "if", "(", "leave", "(", "-", "1", ")", "==", "0", ")", "{", "return", ";", "}", "}", "else", "{", "q", ".", "offer", "(", "value", ")", ";", "}", "}", "else", "{", "q", ".", "offer", "(", "value", ")", ";", "if", "(", "!", "enter", "(", ")", ")", "{", "return", ";", "}", "}", "QueueDrainHelper", ".", "drainLoop", "(", "q", ",", "observer", ",", "delayError", ",", "disposable", ",", "this", ")", ";", "}"], "docstring": "Makes sure the fast-path emits in order.\n@param value the value to emit or queue up\n@param delayError if true, errors are delayed until the source has terminated\n@param disposable the resource to dispose if the drain terminates", "docstring_tokens": ["Makes", "sure", "the", "fast", "-", "path", "emits", "in", "order", "."], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/internal/observers/QueueDrainObserver.java#L88-L108"}, "target": "Makes sure the fast - path emits in order .", "arguments": {"gen_args_0": {"arg_0": "protected final void fastPathOrderedEmit ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , observer , delayError , disposable , this ) ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [["protected final void fastPathUnorderedEmit ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if"]], "filtered_resps": ["protected final void fastPathUnorderedEmit ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if"], "doc_hash": "b5b4d25368b093f9d1865dabdca17e2f04cd1c48ed8f8b8dba7c8450123bd3f9", "prompt_hash": "e1a36a38465179de065cfa74d4f1fd705419e00b076b9783a70e04e3c4bf7490", "target_hash": "48f60e2cf5307d43aa49a4f7313ca9a86bc54ab67fe89f76360f0e7de0a5e053", "smoothed_bleu_4": 1.0885505284730936}
{"doc_id": 1, "doc": {"id": 1, "repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.wrap", "original_string": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> wrap(ObservableSource<T> source) {\n        ObjectHelper.requireNonNull(source, \"source is null\");\n        if (source instanceof Observable) {\n            return RxJavaPlugins.onAssembly((Observable<T>)source);\n        }\n        return RxJavaPlugins.onAssembly(new ObservableFromUnsafeSource<T>(source));\n    }", "language": "java", "code": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> wrap(ObservableSource<T> source) {\n        ObjectHelper.requireNonNull(source, \"source is null\");\n        if (source instanceof Observable) {\n            return RxJavaPlugins.onAssembly((Observable<T>)source);\n        }\n        return RxJavaPlugins.onAssembly(new ObservableFromUnsafeSource<T>(source));\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "wrap", "(", "ObservableSource", "<", "T", ">", "source", ")", "{", "ObjectHelper", ".", "requireNonNull", "(", "source", ",", "\"source is null\"", ")", ";", "if", "(", "source", "instanceof", "Observable", ")", "{", "return", "RxJavaPlugins", ".", "onAssembly", "(", "(", "Observable", "<", "T", ">", ")", "source", ")", ";", "}", "return", "RxJavaPlugins", ".", "onAssembly", "(", "new", "ObservableFromUnsafeSource", "<", "T", ">", "(", "source", ")", ")", ";", "}"], "docstring": "Wraps an ObservableSource into an Observable if not already an Observable.\n\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code wrap} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n\n@param <T> the value type\n@param source the source ObservableSource instance\n@return the new Observable instance or the same as the source\n@throws NullPointerException if source is null", "docstring_tokens": ["Wraps", "an", "ObservableSource", "into", "an", "Observable", "if", "not", "already", "an", "Observable", "."], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4082-L4090"}, "target": "Wraps an ObservableSource into an Observable if not already an Observable .", "arguments": {"gen_args_0": {"arg_0": "@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > wrap ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , \"source is null\" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [["public static < T > Flowable < T > wrap ( FlowableSource < T > source ) { ObjectHelper . requireNonNull ( source , \"source is null\" ) ; if ( source instanceof Flowable ) { return RxJavaPlugins . onAssembly ( ( Flowable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new FlowableFromUnsafeSource < T > ( source ) ) ; } public static < T > Single < T > wrap ( SingleSource < T > source ) { ObjectHelper . requireNonNull ( source , \"source is null\" ) ; if ( source"]], "filtered_resps": ["public static < T > Flowable < T > wrap ( FlowableSource < T > source ) { ObjectHelper . requireNonNull ( source , \"source is null\" ) ; if ( source instanceof Flowable ) { return RxJavaPlugins . onAssembly ( ( Flowable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new FlowableFromUnsafeSource < T > ( source ) ) ; } public static < T > Single < T > wrap ( SingleSource < T > source ) { ObjectHelper . requireNonNull ( source , \"source is null\" ) ; if ( source"], "doc_hash": "279d41a6a0e9359b6a4583a9698359361b95538bad7e2f3d693b33c449c02df8", "prompt_hash": "b7e77f449890a389a250afc16effa9a1b421d24c26fa6cfc8cb3e123dfda011f", "target_hash": "70ccf30e1425491aa2f67e971d5fcd096156a516ea2d1c34b0cbd862b74503e8", "smoothed_bleu_4": 1.163077087294123}
{"doc_id": 2, "doc": {"id": 2, "repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.sorted", "original_string": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Observable<T> sorted(Comparator<? super T> sortFunction) {\n        ObjectHelper.requireNonNull(sortFunction, \"sortFunction is null\");\n        return toList().toObservable().map(Functions.listSorter(sortFunction)).flatMapIterable(Functions.<List<T>>identity());\n    }", "language": "java", "code": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Observable<T> sorted(Comparator<? super T> sortFunction) {\n        ObjectHelper.requireNonNull(sortFunction, \"sortFunction is null\");\n        return toList().toObservable().map(Functions.listSorter(sortFunction)).flatMapIterable(Functions.<List<T>>identity());\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "final", "Observable", "<", "T", ">", "sorted", "(", "Comparator", "<", "?", "super", "T", ">", "sortFunction", ")", "{", "ObjectHelper", ".", "requireNonNull", "(", "sortFunction", ",", "\"sortFunction is null\"", ")", ";", "return", "toList", "(", ")", ".", "toObservable", "(", ")", ".", "map", "(", "Functions", ".", "listSorter", "(", "sortFunction", ")", ")", ".", "flatMapIterable", "(", "Functions", ".", "<", "List", "<", "T", ">", ">", "identity", "(", ")", ")", ";", "}"], "docstring": "Returns an Observable that emits the events emitted by source ObservableSource, in a\nsorted order based on a specified comparison function.\n\n<p>Note that calling {@code sorted} with long, non-terminating or infinite sources\nmight cause {@link OutOfMemoryError}\n\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code sorted} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n\n@param sortFunction\na function that compares two items emitted by the source ObservableSource and returns an Integer\nthat indicates their sort order\n@return an Observable that emits the items emitted by the source ObservableSource in sorted order", "docstring_tokens": ["Returns", "an", "Observable", "that", "emits", "the", "events", "emitted", "by", "source", "ObservableSource", "in", "a", "sorted", "order", "based", "on", "a", "specified", "comparison", "function", "."], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L12008-L12013"}, "target": "Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .", "arguments": {"gen_args_0": {"arg_0": "@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > sorted ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , \"sortFunction is null\" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [["@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > sorted ( Comparator < ? super T > sortFunction , Scheduler scheduler ) { ObjectHelper . requireNonNull ( sortFunction , \"sortFunction is null\" ) ; ObjectHelper . requireNonNull ( scheduler , \"scheduler is null\" ) ; return toList ( ) . toObservable ( scheduler ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; } @ CheckReturnValue @ S"]], "filtered_resps": ["@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > sorted ( Comparator < ? super T > sortFunction , Scheduler scheduler ) { ObjectHelper . requireNonNull ( sortFunction , \"sortFunction is null\" ) ; ObjectHelper . requireNonNull ( scheduler , \"scheduler is null\" ) ; return toList ( ) . toObservable ( scheduler ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; } @ CheckReturnValue @ S"], "doc_hash": "2a3ec8c0d45e47d0157ce864253ed404703b2eaebdee1f8810fed0c42ef8a74c", "prompt_hash": "f29639b4b4bb9fabf22d081abd68e3382738259297ba3cee3d0254bb826c30cc", "target_hash": "a81ac4c9ec751b79dafd85924bfa4281ac248272467053b72a7e638ff90d6286", "smoothed_bleu_4": 1.3964191967922555}
{"doc_id": 3, "doc": {"id": 3, "repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java", "func_name": "ObservableReplay.observeOn", "original_string": "public static <T> ConnectableObservable<T> observeOn(final ConnectableObservable<T> co, final Scheduler scheduler) {\n        final Observable<T> observable = co.observeOn(scheduler);\n        return RxJavaPlugins.onAssembly(new Replay<T>(co, observable));\n    }", "language": "java", "code": "public static <T> ConnectableObservable<T> observeOn(final ConnectableObservable<T> co, final Scheduler scheduler) {\n        final Observable<T> observable = co.observeOn(scheduler);\n        return RxJavaPlugins.onAssembly(new Replay<T>(co, observable));\n    }", "code_tokens": ["public", "static", "<", "T", ">", "ConnectableObservable", "<", "T", ">", "observeOn", "(", "final", "ConnectableObservable", "<", "T", ">", "co", ",", "final", "Scheduler", "scheduler", ")", "{", "final", "Observable", "<", "T", ">", "observable", "=", "co", ".", "observeOn", "(", "scheduler", ")", ";", "return", "RxJavaPlugins", ".", "onAssembly", "(", "new", "Replay", "<", "T", ">", "(", "co", ",", "observable", ")", ")", ";", "}"], "docstring": "Child Observers will observe the events of the ConnectableObservable on the\nspecified scheduler.\n@param <T> the value type\n@param co the connectable observable instance\n@param scheduler the target scheduler\n@return the new ConnectableObservable instance", "docstring_tokens": ["Child", "Observers", "will", "observe", "the", "events", "of", "the", "ConnectableObservable", "on", "the", "specified", "scheduler", "."], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java#L74-L77"}, "target": "Child Observers will observe the events of the ConnectableObservable on the specified scheduler .", "arguments": {"gen_args_0": {"arg_0": "public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [["public static < T > ConnectableObservable < T > publishOn ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . publishOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; } public static < T > ConnectableObservable < T > subscribeOn ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . subscribeOn ( scheduler ) ; return Rx"]], "filtered_resps": ["public static < T > ConnectableObservable < T > publishOn ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . publishOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; } public static < T > ConnectableObservable < T > subscribeOn ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . subscribeOn ( scheduler ) ; return Rx"], "doc_hash": "8d5e1c1c3530e4a4e9e2b95322d1e2812e0fb7c3da98a3f0bde55598b8584ebe", "prompt_hash": "de8ddafca742d225d0a8c59f2c59454bdd8cba418dd6b595f3f57fa33d603bcf", "target_hash": "65aa9444795799cc42df1009a0cf9a0c42da36282f152af4360708e691b517f9", "smoothed_bleu_4": 1.4113953845671645}
{"doc_id": 4, "doc": {"id": 4, "repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/processors/UnicastProcessor.java", "func_name": "UnicastProcessor.create", "original_string": "@CheckReturnValue\n    @NonNull\n    public static <T> UnicastProcessor<T> create(int capacityHint) {\n        return new UnicastProcessor<T>(capacityHint);\n    }", "language": "java", "code": "@CheckReturnValue\n    @NonNull\n    public static <T> UnicastProcessor<T> create(int capacityHint) {\n        return new UnicastProcessor<T>(capacityHint);\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "NonNull", "public", "static", "<", "T", ">", "UnicastProcessor", "<", "T", ">", "create", "(", "int", "capacityHint", ")", "{", "return", "new", "UnicastProcessor", "<", "T", ">", "(", "capacityHint", ")", ";", "}"], "docstring": "Creates an UnicastProcessor with the given internal buffer capacity hint.\n@param <T> the value type\n@param capacityHint the hint to size the internal unbounded buffer\n@return an UnicastProcessor instance", "docstring_tokens": ["Creates", "an", "UnicastProcessor", "with", "the", "given", "internal", "buffer", "capacity", "hint", "."], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/processors/UnicastProcessor.java#L192-L196"}, "target": "Creates an UnicastProcessor with the given internal buffer capacity hint .", "arguments": {"gen_args_0": {"arg_0": "@ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [["\n\n @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint, Executor executor ) { return new UnicastProcessor < T > ( capacityHint, executor ) ; }\n\n @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( Executor executor ) { return new UnicastProcessor < T > ( executor ) ; }\n\n @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( ) { return new UnicastProcessor < T"]], "filtered_resps": ["\n\n @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint, Executor executor ) { return new UnicastProcessor < T > ( capacityHint, executor ) ; }\n\n @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( Executor executor ) { return new UnicastProcessor < T > ( executor ) ; }\n\n @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( ) { return new UnicastProcessor < T"], "doc_hash": "55824df26334564aa22e7a18c59f20f97e1ed9cb44750fb3ee8a55ecdce7a451", "prompt_hash": "c952e00ac2218be5fe27075a4c32a5063921a722098c8b5955c978c6c467c580", "target_hash": "1040d412df6c135e07b3c17612524fc00c63d0740f72c08fc645eb07a86a5470", "smoothed_bleu_4": 1.1594740399684504}
{"doc_id": 5, "doc": {"id": 5, "repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/processors/UnicastProcessor.java", "func_name": "UnicastProcessor.create", "original_string": "@CheckReturnValue\n    @NonNull\n    public static <T> UnicastProcessor<T> create(int capacityHint, Runnable onCancelled) {\n        ObjectHelper.requireNonNull(onCancelled, \"onTerminate\");\n        return new UnicastProcessor<T>(capacityHint, onCancelled);\n    }", "language": "java", "code": "@CheckReturnValue\n    @NonNull\n    public static <T> UnicastProcessor<T> create(int capacityHint, Runnable onCancelled) {\n        ObjectHelper.requireNonNull(onCancelled, \"onTerminate\");\n        return new UnicastProcessor<T>(capacityHint, onCancelled);\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "NonNull", "public", "static", "<", "T", ">", "UnicastProcessor", "<", "T", ">", "create", "(", "int", "capacityHint", ",", "Runnable", "onCancelled", ")", "{", "ObjectHelper", ".", "requireNonNull", "(", "onCancelled", ",", "\"onTerminate\"", ")", ";", "return", "new", "UnicastProcessor", "<", "T", ">", "(", "capacityHint", ",", "onCancelled", ")", ";", "}"], "docstring": "Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for\nthe case when the single Subscriber cancels its subscription.\n\n<p>The callback, if not null, is called exactly once and\nnon-overlapped with any active replay.\n\n@param <T> the value type\n@param capacityHint the hint to size the internal unbounded buffer\n@param onCancelled the non null callback\n@return an UnicastProcessor instance", "docstring_tokens": ["Creates", "an", "UnicastProcessor", "with", "the", "given", "internal", "buffer", "capacity", "hint", "and", "a", "callback", "for", "the", "case", "when", "the", "single", "Subscriber", "cancels", "its", "subscription", "."], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/processors/UnicastProcessor.java#L224-L229"}, "target": "Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .", "arguments": {"gen_args_0": {"arg_0": "@ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , \"onTerminate\" ) ; return new UnicastProcessor < T > ( capacityHint , onCancelled ) ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [["@ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , \"onTerminate\" ) ; return new UnicastProcessor < T > ( onCancelled ) ; } @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; } @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create () {"]], "filtered_resps": ["@ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , \"onTerminate\" ) ; return new UnicastProcessor < T > ( onCancelled ) ; } @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; } @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create () {"], "doc_hash": "ccbf621b3588bb7dd78e1b511c396468ffa0f88388b0130abb8e874b1f9b686a", "prompt_hash": "db2c5bc73e865f5feea953c9ac85a2fe1f774e18ffccbbc7951d0c958bd5ab27", "target_hash": "0a2ea76061e82bce3c7bdd7f253bd86de7475c647e94eb11549d432c3c7dd671", "smoothed_bleu_4": 1.3630498423423174}
{"doc_id": 6, "doc": {"id": 6, "repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/internal/operators/flowable/FlowableScalarXMap.java", "func_name": "FlowableScalarXMap.tryScalarXMapSubscribe", "original_string": "@SuppressWarnings(\"unchecked\")\n    public static <T, R> boolean tryScalarXMapSubscribe(Publisher<T> source,\n            Subscriber<? super R> subscriber,\n            Function<? super T, ? extends Publisher<? extends R>> mapper) {\n        if (source instanceof Callable) {\n            T t;\n\n            try {\n                t = ((Callable<T>)source).call();\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                EmptySubscription.error(ex, subscriber);\n                return true;\n            }\n\n            if (t == null) {\n                EmptySubscription.complete(subscriber);\n                return true;\n            }\n\n            Publisher<? extends R> r;\n\n            try {\n                r = ObjectHelper.requireNonNull(mapper.apply(t), \"The mapper returned a null Publisher\");\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                EmptySubscription.error(ex, subscriber);\n                return true;\n            }\n\n            if (r instanceof Callable) {\n                R u;\n\n                try {\n                    u = ((Callable<R>)r).call();\n                } catch (Throwable ex) {\n                    Exceptions.throwIfFatal(ex);\n                    EmptySubscription.error(ex, subscriber);\n                    return true;\n                }\n\n                if (u == null) {\n                    EmptySubscription.complete(subscriber);\n                    return true;\n                }\n                subscriber.onSubscribe(new ScalarSubscription<R>(subscriber, u));\n            } else {\n                r.subscribe(subscriber);\n            }\n\n            return true;\n        }\n        return false;\n    }", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\n    public static <T, R> boolean tryScalarXMapSubscribe(Publisher<T> source,\n            Subscriber<? super R> subscriber,\n            Function<? super T, ? extends Publisher<? extends R>> mapper) {\n        if (source instanceof Callable) {\n            T t;\n\n            try {\n                t = ((Callable<T>)source).call();\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                EmptySubscription.error(ex, subscriber);\n                return true;\n            }\n\n            if (t == null) {\n                EmptySubscription.complete(subscriber);\n                return true;\n            }\n\n            Publisher<? extends R> r;\n\n            try {\n                r = ObjectHelper.requireNonNull(mapper.apply(t), \"The mapper returned a null Publisher\");\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                EmptySubscription.error(ex, subscriber);\n                return true;\n            }\n\n            if (r instanceof Callable) {\n                R u;\n\n                try {\n                    u = ((Callable<R>)r).call();\n                } catch (Throwable ex) {\n                    Exceptions.throwIfFatal(ex);\n                    EmptySubscription.error(ex, subscriber);\n                    return true;\n                }\n\n                if (u == null) {\n                    EmptySubscription.complete(subscriber);\n                    return true;\n                }\n                subscriber.onSubscribe(new ScalarSubscription<R>(subscriber, u));\n            } else {\n                r.subscribe(subscriber);\n            }\n\n            return true;\n        }\n        return false;\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "public", "static", "<", "T", ",", "R", ">", "boolean", "tryScalarXMapSubscribe", "(", "Publisher", "<", "T", ">", "source", ",", "Subscriber", "<", "?", "super", "R", ">", "subscriber", ",", "Function", "<", "?", "super", "T", ",", "?", "extends", "Publisher", "<", "?", "extends", "R", ">", ">", "mapper", ")", "{", "if", "(", "source", "instanceof", "Callable", ")", "{", "T", "t", ";", "try", "{", "t", "=", "(", "(", "Callable", "<", "T", ">", ")", "source", ")", ".", "call", "(", ")", ";", "}", "catch", "(", "Throwable", "ex", ")", "{", "Exceptions", ".", "throwIfFatal", "(", "ex", ")", ";", "EmptySubscription", ".", "error", "(", "ex", ",", "subscriber", ")", ";", "return", "true", ";", "}", "if", "(", "t", "==", "null", ")", "{", "EmptySubscription", ".", "complete", "(", "subscriber", ")", ";", "return", "true", ";", "}", "Publisher", "<", "?", "extends", "R", ">", "r", ";", "try", "{", "r", "=", "ObjectHelper", ".", "requireNonNull", "(", "mapper", ".", "apply", "(", "t", ")", ",", "\"The mapper returned a null Publisher\"", ")", ";", "}", "catch", "(", "Throwable", "ex", ")", "{", "Exceptions", ".", "throwIfFatal", "(", "ex", ")", ";", "EmptySubscription", ".", "error", "(", "ex", ",", "subscriber", ")", ";", "return", "true", ";", "}", "if", "(", "r", "instanceof", "Callable", ")", "{", "R", "u", ";", "try", "{", "u", "=", "(", "(", "Callable", "<", "R", ">", ")", "r", ")", ".", "call", "(", ")", ";", "}", "catch", "(", "Throwable", "ex", ")", "{", "Exceptions", ".", "throwIfFatal", "(", "ex", ")", ";", "EmptySubscription", ".", "error", "(", "ex", ",", "subscriber", ")", ";", "return", "true", ";", "}", "if", "(", "u", "==", "null", ")", "{", "EmptySubscription", ".", "complete", "(", "subscriber", ")", ";", "return", "true", ";", "}", "subscriber", ".", "onSubscribe", "(", "new", "ScalarSubscription", "<", "R", ">", "(", "subscriber", ",", "u", ")", ")", ";", "}", "else", "{", "r", ".", "subscribe", "(", "subscriber", ")", ";", "}", "return", "true", ";", "}", "return", "false", ";", "}"], "docstring": "Tries to subscribe to a possibly Callable source's mapped Publisher.\n@param <T> the input value type\n@param <R> the output value type\n@param source the source Publisher\n@param subscriber the subscriber\n@param mapper the function mapping a scalar value into a Publisher\n@return true if successful, false if the caller should continue with the regular path.", "docstring_tokens": ["Tries", "to", "subscribe", "to", "a", "possibly", "Callable", "source", "s", "mapped", "Publisher", "."], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/internal/operators/flowable/FlowableScalarXMap.java#L46-L99"}, "target": "Tries to subscribe to a possibly Callable source s mapped Publisher .", "arguments": {"gen_args_0": {"arg_0": "@ SuppressWarnings ( \"unchecked\" ) public static < T , R > boolean tryScalarXMapSubscribe ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return true ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return true ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , \"The mapper returned a null Publisher\" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return true ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return true ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return true ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return true ; } return false ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [["@ SuppressWarnings ( \"unchecked\" ) public static < T > boolean tryScalarSubscribe ( Publisher < T > source , Subscriber < ? super T > subscriber ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return true ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return true ; } subscriber ."]], "filtered_resps": ["@ SuppressWarnings ( \"unchecked\" ) public static < T > boolean tryScalarSubscribe ( Publisher < T > source , Subscriber < ? super T > subscriber ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return true ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return true ; } subscriber ."], "doc_hash": "24cb175de9460ec4bfd0f552f98965a36e0fc2939a4351ac0a7e66a0efe060ab", "prompt_hash": "40aa78d95e7416d08423ca77dac021e3c6ec588b000a60eb5033c0e08118042a", "target_hash": "317e60ea3ae439e73b7343ef172503d408aa22e8f5577f50bf92e71491336c23", "smoothed_bleu_4": 1.3437126496353247}
{"doc_id": 7, "doc": {"id": 7, "repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/internal/operators/flowable/FlowableScalarXMap.java", "func_name": "FlowableScalarXMap.scalarXMap", "original_string": "public static <T, U> Flowable<U> scalarXMap(final T value, final Function<? super T, ? extends Publisher<? extends U>> mapper) {\n        return RxJavaPlugins.onAssembly(new ScalarXMapFlowable<T, U>(value, mapper));\n    }", "language": "java", "code": "public static <T, U> Flowable<U> scalarXMap(final T value, final Function<? super T, ? extends Publisher<? extends U>> mapper) {\n        return RxJavaPlugins.onAssembly(new ScalarXMapFlowable<T, U>(value, mapper));\n    }", "code_tokens": ["public", "static", "<", "T", ",", "U", ">", "Flowable", "<", "U", ">", "scalarXMap", "(", "final", "T", "value", ",", "final", "Function", "<", "?", "super", "T", ",", "?", "extends", "Publisher", "<", "?", "extends", "U", ">", ">", "mapper", ")", "{", "return", "RxJavaPlugins", ".", "onAssembly", "(", "new", "ScalarXMapFlowable", "<", "T", ",", "U", ">", "(", "value", ",", "mapper", ")", ")", ";", "}"], "docstring": "Maps a scalar value into a Publisher and emits its values.\n\n@param <T> the scalar value type\n@param <U> the output value type\n@param value the scalar value to map\n@param mapper the function that gets the scalar value and should return\na Publisher that gets streamed\n@return the new Flowable instance", "docstring_tokens": ["Maps", "a", "scalar", "value", "into", "a", "Publisher", "and", "emits", "its", "values", "."], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/internal/operators/flowable/FlowableScalarXMap.java#L111-L113"}, "target": "Maps a scalar value into a Publisher and emits its values .", "arguments": {"gen_args_0": {"arg_0": "public static < T , U > Flowable < U > scalarXMap ( final T value , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( value , mapper ) ) ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]], "filtered_resps": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "doc_hash": "d7e002ed46202d23ffc14a4a470cb123aba4f5360b476ffad76045b54fcd1ca3", "prompt_hash": "ab5fdad4c2f18fec738583b0a2a67592b5787c32eab11c8224631c790f0f07d8", "target_hash": "e45b6ff2dbd50231e71c7c5dc00f770da1a4a842d0c2ca0d400a50d336c67ecc", "smoothed_bleu_4": 0.000614421235332821}
{"doc_id": 8, "doc": {"id": 8, "repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/plugins/RxJavaPlugins.java", "func_name": "RxJavaPlugins.reset", "original_string": "public static void reset() {\n        setErrorHandler(null);\n        setScheduleHandler(null);\n\n        setComputationSchedulerHandler(null);\n        setInitComputationSchedulerHandler(null);\n\n        setIoSchedulerHandler(null);\n        setInitIoSchedulerHandler(null);\n\n        setSingleSchedulerHandler(null);\n        setInitSingleSchedulerHandler(null);\n\n        setNewThreadSchedulerHandler(null);\n        setInitNewThreadSchedulerHandler(null);\n\n        setOnFlowableAssembly(null);\n        setOnFlowableSubscribe(null);\n\n        setOnObservableAssembly(null);\n        setOnObservableSubscribe(null);\n\n        setOnSingleAssembly(null);\n        setOnSingleSubscribe(null);\n\n        setOnCompletableAssembly(null);\n        setOnCompletableSubscribe(null);\n\n        setOnConnectableFlowableAssembly(null);\n        setOnConnectableObservableAssembly(null);\n\n        setOnMaybeAssembly(null);\n        setOnMaybeSubscribe(null);\n\n        setOnParallelAssembly(null);\n\n        setFailOnNonBlockingScheduler(false);\n        setOnBeforeBlocking(null);\n    }", "language": "java", "code": "public static void reset() {\n        setErrorHandler(null);\n        setScheduleHandler(null);\n\n        setComputationSchedulerHandler(null);\n        setInitComputationSchedulerHandler(null);\n\n        setIoSchedulerHandler(null);\n        setInitIoSchedulerHandler(null);\n\n        setSingleSchedulerHandler(null);\n        setInitSingleSchedulerHandler(null);\n\n        setNewThreadSchedulerHandler(null);\n        setInitNewThreadSchedulerHandler(null);\n\n        setOnFlowableAssembly(null);\n        setOnFlowableSubscribe(null);\n\n        setOnObservableAssembly(null);\n        setOnObservableSubscribe(null);\n\n        setOnSingleAssembly(null);\n        setOnSingleSubscribe(null);\n\n        setOnCompletableAssembly(null);\n        setOnCompletableSubscribe(null);\n\n        setOnConnectableFlowableAssembly(null);\n        setOnConnectableObservableAssembly(null);\n\n        setOnMaybeAssembly(null);\n        setOnMaybeSubscribe(null);\n\n        setOnParallelAssembly(null);\n\n        setFailOnNonBlockingScheduler(false);\n        setOnBeforeBlocking(null);\n    }", "code_tokens": ["public", "static", "void", "reset", "(", ")", "{", "setErrorHandler", "(", "null", ")", ";", "setScheduleHandler", "(", "null", ")", ";", "setComputationSchedulerHandler", "(", "null", ")", ";", "setInitComputationSchedulerHandler", "(", "null", ")", ";", "setIoSchedulerHandler", "(", "null", ")", ";", "setInitIoSchedulerHandler", "(", "null", ")", ";", "setSingleSchedulerHandler", "(", "null", ")", ";", "setInitSingleSchedulerHandler", "(", "null", ")", ";", "setNewThreadSchedulerHandler", "(", "null", ")", ";", "setInitNewThreadSchedulerHandler", "(", "null", ")", ";", "setOnFlowableAssembly", "(", "null", ")", ";", "setOnFlowableSubscribe", "(", "null", ")", ";", "setOnObservableAssembly", "(", "null", ")", ";", "setOnObservableSubscribe", "(", "null", ")", ";", "setOnSingleAssembly", "(", "null", ")", ";", "setOnSingleSubscribe", "(", "null", ")", ";", "setOnCompletableAssembly", "(", "null", ")", ";", "setOnCompletableSubscribe", "(", "null", ")", ";", "setOnConnectableFlowableAssembly", "(", "null", ")", ";", "setOnConnectableObservableAssembly", "(", "null", ")", ";", "setOnMaybeAssembly", "(", "null", ")", ";", "setOnMaybeSubscribe", "(", "null", ")", ";", "setOnParallelAssembly", "(", "null", ")", ";", "setFailOnNonBlockingScheduler", "(", "false", ")", ";", "setOnBeforeBlocking", "(", "null", ")", ";", "}"], "docstring": "Removes all handlers and resets to default behavior.", "docstring_tokens": ["Removes", "all", "handlers", "and", "resets", "to", "default", "behavior", "."], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/plugins/RxJavaPlugins.java#L493-L531"}, "target": "Removes all handlers and resets to default behavior .", "arguments": {"gen_args_0": {"arg_0": "public static void reset ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( false ) ; setOnBeforeBlocking ( null ) ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]], "filtered_resps": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "doc_hash": "4f0e4f114a2c70fa6ae9f7537a4005a1f99d52a7496eb067de8591213e2be445", "prompt_hash": "2271a88d76c8dd43d7039af094fe15da1128d043eb12cc1ee59c34e856cf174d", "target_hash": "848e77c8a2eacaedf572621009afb498c04bc8becef843dd81c239b7b69c9e47", "smoothed_bleu_4": 0.012340980408667957}
{"doc_id": 9, "doc": {"id": 9, "repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Maybe.java", "func_name": "Maybe.fromCompletable", "original_string": "@CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Maybe<T> fromCompletable(CompletableSource completableSource) {\n        ObjectHelper.requireNonNull(completableSource, \"completableSource is null\");\n        return RxJavaPlugins.onAssembly(new MaybeFromCompletable<T>(completableSource));\n    }", "language": "java", "code": "@CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Maybe<T> fromCompletable(CompletableSource completableSource) {\n        ObjectHelper.requireNonNull(completableSource, \"completableSource is null\");\n        return RxJavaPlugins.onAssembly(new MaybeFromCompletable<T>(completableSource));\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "NonNull", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Maybe", "<", "T", ">", "fromCompletable", "(", "CompletableSource", "completableSource", ")", "{", "ObjectHelper", ".", "requireNonNull", "(", "completableSource", ",", "\"completableSource is null\"", ")", ";", "return", "RxJavaPlugins", ".", "onAssembly", "(", "new", "MaybeFromCompletable", "<", "T", ">", "(", "completableSource", ")", ")", ";", "}"], "docstring": "Wraps a CompletableSource into a Maybe.\n\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code fromCompletable} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n@param <T> the target type\n@param completableSource the CompletableSource to convert from\n@return the new Maybe instance\n@throws NullPointerException if completable is null", "docstring_tokens": ["Wraps", "a", "CompletableSource", "into", "a", "Maybe", "."], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Maybe.java#L705-L711"}, "target": "Wraps a CompletableSource into a Maybe .", "arguments": {"gen_args_0": {"arg_0": "@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromCompletable ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , \"completableSource is null\" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [["@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromFlowable ( Flowable < T > flowable ) { ObjectHelper . requireNonNull ( flowable , \"flowable is null\" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromFlowable < T > ( flowable ) ) ; } @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromFuture ( Future < T > future ) { ObjectHelper . requireNonNull ( future"]], "filtered_resps": ["@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromFlowable ( Flowable < T > flowable ) { ObjectHelper . requireNonNull ( flowable , \"flowable is null\" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromFlowable < T > ( flowable ) ) ; } @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromFuture ( Future < T > future ) { ObjectHelper . requireNonNull ( future"], "doc_hash": "032e12aef2b32a5b61f4e9c949fd317679eca9c22e665f306e97ad22c2d164e8", "prompt_hash": "3a1a04044084f69f495c3cfde4a74677e77616b8e3489fc25601ffe544f3c3eb", "target_hash": "5f6fd2d3d39f6273a4192902909b5ff55f966e9765a7ea87843fe042310ba430", "smoothed_bleu_4": 1.303294641932591}
{"doc_id": 10, "doc": {"id": 10, "repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Maybe.java", "func_name": "Maybe.fromSingle", "original_string": "@CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Maybe<T> fromSingle(SingleSource<T> singleSource) {\n        ObjectHelper.requireNonNull(singleSource, \"singleSource is null\");\n        return RxJavaPlugins.onAssembly(new MaybeFromSingle<T>(singleSource));\n    }", "language": "java", "code": "@CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Maybe<T> fromSingle(SingleSource<T> singleSource) {\n        ObjectHelper.requireNonNull(singleSource, \"singleSource is null\");\n        return RxJavaPlugins.onAssembly(new MaybeFromSingle<T>(singleSource));\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "NonNull", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Maybe", "<", "T", ">", "fromSingle", "(", "SingleSource", "<", "T", ">", "singleSource", ")", "{", "ObjectHelper", ".", "requireNonNull", "(", "singleSource", ",", "\"singleSource is null\"", ")", ";", "return", "RxJavaPlugins", ".", "onAssembly", "(", "new", "MaybeFromSingle", "<", "T", ">", "(", "singleSource", ")", ")", ";", "}"], "docstring": "Wraps a SingleSource into a Maybe.\n\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code fromSingle} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n@param <T> the target type\n@param singleSource the SingleSource to convert from\n@return the new Maybe instance\n@throws NullPointerException if single is null", "docstring_tokens": ["Wraps", "a", "SingleSource", "into", "a", "Maybe", "."], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Maybe.java#L725-L731"}, "target": "Wraps a SingleSource into a Maybe .", "arguments": {"gen_args_0": {"arg_0": "@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromSingle ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , \"singleSource is null\" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [["@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromFlowable ( Flowable < T > flowable ) { ObjectHelper . requireNonNull ( flowable , \"flowable is null\" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromFlowable < T > ( flowable ) ) ; } @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromObservable ( Observable < T > observable ) { ObjectHelper . requireNonNull"]], "filtered_resps": ["@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromFlowable ( Flowable < T > flowable ) { ObjectHelper . requireNonNull ( flowable , \"flowable is null\" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromFlowable < T > ( flowable ) ) ; } @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromObservable ( Observable < T > observable ) { ObjectHelper . requireNonNull"], "doc_hash": "e646cdefa6c54896a30df679b1f87bb5eb4ad07b57ece66681a6c3d78d53a572", "prompt_hash": "28b29604a9634aa64078652ec9ad4f259e0d0722e71285a221ee046dc4122a26", "target_hash": "6240aa3370c7ee9dffb75aec9b96d6b0fb10d6c440852b4094f1608a3575a4ae", "smoothed_bleu_4": 1.3325026288285442}
{"doc_id": 11, "doc": {"id": 11, "repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Maybe.java", "func_name": "Maybe.retry", "original_string": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Maybe<T> retry(long times, Predicate<? super Throwable> predicate) {\n        return toFlowable().retry(times, predicate).singleElement();\n    }", "language": "java", "code": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Maybe<T> retry(long times, Predicate<? super Throwable> predicate) {\n        return toFlowable().retry(times, predicate).singleElement();\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "final", "Maybe", "<", "T", ">", "retry", "(", "long", "times", ",", "Predicate", "<", "?", "super", "Throwable", ">", "predicate", ")", "{", "return", "toFlowable", "(", ")", ".", "retry", "(", "times", ",", "predicate", ")", ".", "singleElement", "(", ")", ";", "}"], "docstring": "Retries at most times or until the predicate returns false, whichever happens first.\n\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code retry} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n@param times the number of times to resubscribe if the current Maybe fails\n@param predicate the predicate called with the failure Throwable and should return true to trigger a retry.\n@return the new Maybe instance", "docstring_tokens": ["Retries", "at", "most", "times", "or", "until", "the", "predicate", "returns", "false", "whichever", "happens", "first", "."], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Maybe.java#L4055-L4059"}, "target": "Retries at most times or until the predicate returns false whichever happens first .", "arguments": {"gen_args_0": {"arg_0": "@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long times , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( times , predicate ) . singleElement ( ) ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [["@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long times , Predicate < ? super Throwable > predicate , Scheduler scheduler ) { return toFlowable ( ) . retry ( times , predicate , scheduler ) . singleElement ( ) ; } @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( predicate ) . singleElement ( ) ; } @ CheckReturnValue @"]], "filtered_resps": ["@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long times , Predicate < ? super Throwable > predicate , Scheduler scheduler ) { return toFlowable ( ) . retry ( times , predicate , scheduler ) . singleElement ( ) ; } @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( predicate ) . singleElement ( ) ; } @ CheckReturnValue @"], "doc_hash": "bf855d6b5955b9654178548412a1d4feedb67fe75f0c126f127db269843a568e", "prompt_hash": "5a5f4c4ef53d7ee7fe19a65d7a328292ae8172e18d5f8a5d9d3a6213ab0ae81c", "target_hash": "62fc5123f11e942dc8fd792e1a5d05ab0cc319342563d1fc9c1298b146953ab2", "smoothed_bleu_4": 1.3964191967922555}
{"doc_id": 12, "doc": {"id": 12, "repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/internal/functions/ObjectHelper.java", "func_name": "ObjectHelper.requireNonNull", "original_string": "public static <T> T requireNonNull(T object, String message) {\n        if (object == null) {\n            throw new NullPointerException(message);\n        }\n        return object;\n    }", "language": "java", "code": "public static <T> T requireNonNull(T object, String message) {\n        if (object == null) {\n            throw new NullPointerException(message);\n        }\n        return object;\n    }", "code_tokens": ["public", "static", "<", "T", ">", "T", "requireNonNull", "(", "T", "object", ",", "String", "message", ")", "{", "if", "(", "object", "==", "null", ")", "{", "throw", "new", "NullPointerException", "(", "message", ")", ";", "}", "return", "object", ";", "}"], "docstring": "Verifies if the object is not null and returns it or throws a NullPointerException\nwith the given message.\n@param <T> the value type\n@param object the object to verify\n@param message the message to use with the NullPointerException\n@return the object itself\n@throws NullPointerException if object is null", "docstring_tokens": ["Verifies", "if", "the", "object", "is", "not", "null", "and", "returns", "it", "or", "throws", "a", "NullPointerException", "with", "the", "given", "message", "."], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/internal/functions/ObjectHelper.java#L37-L42"}, "target": "Verifies if the object is not null and returns it or throws a NullPointerException with the given message .", "arguments": {"gen_args_0": {"arg_0": "public static < T > T requireNonNull ( T object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [["public static < T > T requireNonNull ( T object , String message , Throwable cause ) { if ( object == null ) { throw new NullPointerException ( message , cause ) ; } return object ; } public static < T > T requireNonNullElse ( T object , T other , String message ) { if ( object == null ) { return other ; } return object ; } public static < T > T requireNonNullElse ( T object , T other , String message , Throwable cause ) { if ( object == null ) { return other ; } return object ; } public static < T > T requireNonNullEl"]], "filtered_resps": ["public static < T > T requireNonNull ( T object , String message , Throwable cause ) { if ( object == null ) { throw new NullPointerException ( message , cause ) ; } return object ; } public static < T > T requireNonNullElse ( T object , T other , String message ) { if ( object == null ) { return other ; } return object ; } public static < T > T requireNonNullElse ( T object , T other , String message , Throwable cause ) { if ( object == null ) { return other ; } return object ; } public static < T > T requireNonNullEl"], "doc_hash": "f72d1a3a9557fe684cc605ce184ed7a3de21d7550e71437729e536e73aa1ca44", "prompt_hash": "e69af6d6f3ab6d5e2756a0dcbffab13bdfb1e7bbe850d861d02af23c82d3a205", "target_hash": "c29e937d81bd1220fa61abc6d5771a7fbddec7dc5c417f4e048c29f4960c48bb", "smoothed_bleu_4": 1.2753827382011276}
{"doc_id": 13, "doc": {"id": 13, "repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/internal/functions/Functions.java", "func_name": "Functions.identity", "original_string": "@SuppressWarnings(\"unchecked\")\n    public static <T> Function<T, T> identity() {\n        return (Function<T, T>)IDENTITY;\n    }", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\n    public static <T> Function<T, T> identity() {\n        return (Function<T, T>)IDENTITY;\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "public", "static", "<", "T", ">", "Function", "<", "T", ",", "T", ">", "identity", "(", ")", "{", "return", "(", "Function", "<", "T", ",", "T", ">", ")", "IDENTITY", ";", "}"], "docstring": "Returns an identity function that simply returns its argument.\n@param <T> the input and output value type\n@return the identity function", "docstring_tokens": ["Returns", "an", "identity", "function", "that", "simply", "returns", "its", "argument", "."], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/internal/functions/Functions.java#L88-L91"}, "target": "Returns an identity function that simply returns its argument .", "arguments": {"gen_args_0": {"arg_0": "@ SuppressWarnings ( \"unchecked\" ) public static < T > Function < T , T > identity ( ) { return ( Function < T , T > ) IDENTITY ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [["public static < T > Function < T , T > identity ( ) { return ( Function < T , T > ) IDENTITY ; } public static < T > Function < T , T > identity ( ) { return ( Function < T , T > ) IDENTITY ; } public static < T > Function < T , T > identity ( ) { return ( Function < T , T > ) IDENTITY ; } public static < T > Function < T , T > identity ( ) { return ( Function < T , T > ) IDENTITY ; } public static < T > Function < T , T > identity"]], "filtered_resps": ["public static < T > Function < T , T > identity ( ) { return ( Function < T , T > ) IDENTITY ; } public static < T > Function < T , T > identity ( ) { return ( Function < T , T > ) IDENTITY ; } public static < T > Function < T , T > identity ( ) { return ( Function < T , T > ) IDENTITY ; } public static < T > Function < T , T > identity ( ) { return ( Function < T , T > ) IDENTITY ; } public static < T > Function < T , T > identity"], "doc_hash": "c57f810c44f614485d176b8f6cf3f0799f974d58dd69ea65b5a70eb14649d4bc", "prompt_hash": "7704f2a85512f83dcf4053b1142719cfd61616dcd7ce93905ca1493b75838a7e", "target_hash": "99a184f7300dcb3dcc27beacd341407198c03866458b5647e362243477a1d1a5", "smoothed_bleu_4": 0.9972628332334657}
{"doc_id": 14, "doc": {"id": 14, "repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/internal/functions/Functions.java", "func_name": "Functions.justCallable", "original_string": "public static <T> Callable<T> justCallable(T value) {\n        return new JustValue<Object, T>(value);\n    }", "language": "java", "code": "public static <T> Callable<T> justCallable(T value) {\n        return new JustValue<Object, T>(value);\n    }", "code_tokens": ["public", "static", "<", "T", ">", "Callable", "<", "T", ">", "justCallable", "(", "T", "value", ")", "{", "return", "new", "JustValue", "<", "Object", ",", "T", ">", "(", "value", ")", ";", "}"], "docstring": "Returns a Callable that returns the given value.\n@param <T> the value type\n@param value the value to return\n@return the new Callable instance", "docstring_tokens": ["Returns", "a", "Callable", "that", "returns", "the", "given", "value", "."], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/internal/functions/Functions.java#L198-L200"}, "target": "Returns a Callable that returns the given value .", "arguments": {"gen_args_0": {"arg_0": "public static < T > Callable < T > justCallable ( T value ) { return new JustValue < Object , T > ( value ) ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [["\n\n    public static < T > Callable < T > justCallable ( Callable < T > callable ) { return new JustCallable < Object , T > ( callable ) ; }\n\n    public static < T > Callable < T > justCallable ( Supplier < T > supplier ) { return new JustCallable < Object , T > ( supplier ) ; }\n\n    public static < T > Callable < T > justCallable ( Function < Object , T > function ) { return new JustCallable < Object , T > ( function ) ; }\n\n    public static"]], "filtered_resps": ["\n\n    public static < T > Callable < T > justCallable ( Callable < T > callable ) { return new JustCallable < Object , T > ( callable ) ; }\n\n    public static < T > Callable < T > justCallable ( Supplier < T > supplier ) { return new JustCallable < Object , T > ( supplier ) ; }\n\n    public static < T > Callable < T > justCallable ( Function < Object , T > function ) { return new JustCallable < Object , T > ( function ) ; }\n\n    public static"], "doc_hash": "83b1f2604203007a7a3cc53a8b4e7a4b2f486c927725b5b2c74dc2bb88b25c53", "prompt_hash": "27b426a6a93c4e7cfcd78e58cef32ab09dc5f3251759e07407b62db2f9a01166", "target_hash": "a2317febd240d06afc91a8a18a57e4464f3896619d11a6576d59a70b8c057399", "smoothed_bleu_4": 1.0389997026924942}
{"doc_id": 15, "doc": {"id": 15, "repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/internal/functions/Functions.java", "func_name": "Functions.justFunction", "original_string": "public static <T, U> Function<T, U> justFunction(U value) {\n        return new JustValue<T, U>(value);\n    }", "language": "java", "code": "public static <T, U> Function<T, U> justFunction(U value) {\n        return new JustValue<T, U>(value);\n    }", "code_tokens": ["public", "static", "<", "T", ",", "U", ">", "Function", "<", "T", ",", "U", ">", "justFunction", "(", "U", "value", ")", "{", "return", "new", "JustValue", "<", "T", ",", "U", ">", "(", "value", ")", ";", "}"], "docstring": "Returns a Function that ignores its parameter and returns the given value.\n@param <T> the function's input type\n@param <U> the value and return type of the function\n@param value the value to return\n@return the new Function instance", "docstring_tokens": ["Returns", "a", "Function", "that", "ignores", "its", "parameter", "and", "returns", "the", "given", "value", "."], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/internal/functions/Functions.java#L209-L211"}, "target": "Returns a Function that ignores its parameter and returns the given value .", "arguments": {"gen_args_0": {"arg_0": "public static < T , U > Function < T , U > justFunction ( U value ) { return new JustValue < T , U > ( value ) ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]], "filtered_resps": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "doc_hash": "5ea56481938ecc17ae884e3ea9f244205be869a75002b849d626bd2a82c77ee0", "prompt_hash": "fce1d296aa651875328ea2b9f537996ee65023fd1fd2662371cfcd8ed075d9d7", "target_hash": "2d460dae8c2b79e38c163f27a9a2ec20150e653e15825db7c7411982deca8437", "smoothed_bleu_4": 0.00022603294069810544}
{"doc_id": 16, "doc": {"id": 16, "repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/internal/functions/Functions.java", "func_name": "Functions.castFunction", "original_string": "public static <T, U> Function<T, U> castFunction(Class<U> target) {\n        return new CastToClass<T, U>(target);\n    }", "language": "java", "code": "public static <T, U> Function<T, U> castFunction(Class<U> target) {\n        return new CastToClass<T, U>(target);\n    }", "code_tokens": ["public", "static", "<", "T", ",", "U", ">", "Function", "<", "T", ",", "U", ">", "castFunction", "(", "Class", "<", "U", ">", "target", ")", "{", "return", "new", "CastToClass", "<", "T", ",", "U", ">", "(", "target", ")", ";", "}"], "docstring": "Returns a function that cast the incoming values via a Class object.\n@param <T> the input value type\n@param <U> the output and target type\n@param target the target class\n@return the new Function instance", "docstring_tokens": ["Returns", "a", "function", "that", "cast", "the", "incoming", "values", "via", "a", "Class", "object", "."], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/internal/functions/Functions.java#L233-L235"}, "target": "Returns a function that cast the incoming values via a Class object .", "arguments": {"gen_args_0": {"arg_0": "public static < T , U > Function < T , U > castFunction ( Class < U > target ) { return new CastToClass < T , U > ( target ) ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]], "filtered_resps": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "doc_hash": "ddecbe98ff8c867920469b31ab1701d9fc4ec99058fd832b081a25d1b05f946a", "prompt_hash": "9733aa69d80e1f31fbcc5d3de36830d91a5474382162cf7f30a9c1f22f634cef", "target_hash": "14c9882ba615fc51f31ec434293f3dfaf7c61cd5d6ca9f7494ef5d78921140ee", "smoothed_bleu_4": 0.00022603294069810544}
{"doc_id": 17, "doc": {"id": 17, "repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/subjects/UnicastSubject.java", "func_name": "UnicastSubject.create", "original_string": "@CheckReturnValue\n    @NonNull\n    public static <T> UnicastSubject<T> create() {\n        return new UnicastSubject<T>(bufferSize(), true);\n    }", "language": "java", "code": "@CheckReturnValue\n    @NonNull\n    public static <T> UnicastSubject<T> create() {\n        return new UnicastSubject<T>(bufferSize(), true);\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "NonNull", "public", "static", "<", "T", ">", "UnicastSubject", "<", "T", ">", "create", "(", ")", "{", "return", "new", "UnicastSubject", "<", "T", ">", "(", "bufferSize", "(", ")", ",", "true", ")", ";", "}"], "docstring": "Creates an UnicastSubject with an internal buffer capacity hint 16.\n@param <T> the value type\n@return an UnicastSubject instance", "docstring_tokens": ["Creates", "an", "UnicastSubject", "with", "an", "internal", "buffer", "capacity", "hint", "16", "."], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/subjects/UnicastSubject.java#L181-L185"}, "target": "Creates an UnicastSubject with an internal buffer capacity hint 16 .", "arguments": {"gen_args_0": {"arg_0": "@ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( ) { return new UnicastSubject < T > ( bufferSize ( ) , true ) ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [["@ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int bufferSize ) { return new UnicastSubject < T > ( bufferSize , true ) ; } @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( ) { return new UnicastSubject < T > ( bufferSize ( ) , false ) ; } @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int bufferSize ) { return new UnicastSubject < T > ( bufferSize , false ) ; }"]], "filtered_resps": ["@ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int bufferSize ) { return new UnicastSubject < T > ( bufferSize , true ) ; } @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( ) { return new UnicastSubject < T > ( bufferSize ( ) , false ) ; } @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int bufferSize ) { return new UnicastSubject < T > ( bufferSize , false ) ; }"], "doc_hash": "93122f15a82bacfe4fb1373be7fbd656ce235b33986f4bb3ae30ccddebc8a13d", "prompt_hash": "f5939b1219101f97b88ca8d9fb4a578cde29ef00d7db5a87440ca7bba8488726", "target_hash": "cbcb4ca49bb08d5ae8d9954f4101fd3588746fb690527ac81e51b90bd26f6212", "smoothed_bleu_4": 1.0499086619708744}
{"doc_id": 18, "doc": {"id": 18, "repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/subjects/UnicastSubject.java", "func_name": "UnicastSubject.create", "original_string": "@CheckReturnValue\n    @NonNull\n    public static <T> UnicastSubject<T> create(int capacityHint) {\n        return new UnicastSubject<T>(capacityHint, true);\n    }", "language": "java", "code": "@CheckReturnValue\n    @NonNull\n    public static <T> UnicastSubject<T> create(int capacityHint) {\n        return new UnicastSubject<T>(capacityHint, true);\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "NonNull", "public", "static", "<", "T", ">", "UnicastSubject", "<", "T", ">", "create", "(", "int", "capacityHint", ")", "{", "return", "new", "UnicastSubject", "<", "T", ">", "(", "capacityHint", ",", "true", ")", ";", "}"], "docstring": "Creates an UnicastSubject with the given internal buffer capacity hint.\n@param <T> the value type\n@param capacityHint the hint to size the internal unbounded buffer\n@return an UnicastSubject instance", "docstring_tokens": ["Creates", "an", "UnicastSubject", "with", "the", "given", "internal", "buffer", "capacity", "hint", "."], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/subjects/UnicastSubject.java#L193-L197"}, "target": "Creates an UnicastSubject with the given internal buffer capacity hint .", "arguments": {"gen_args_0": {"arg_0": "@ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint ) { return new UnicastSubject < T > ( capacityHint , true ) ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [["\n\n @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint , boolean synchronous ) { return new UnicastSubject < T > ( capacityHint , synchronous ) ; }\n\n @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( ) { return new UnicastSubject < T > ( true ) ; }\n\n @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( boolean synchronous ) { return new UnicastSubject < T > ( synchron"]], "filtered_resps": ["\n\n @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint , boolean synchronous ) { return new UnicastSubject < T > ( capacityHint , synchronous ) ; }\n\n @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( ) { return new UnicastSubject < T > ( true ) ; }\n\n @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( boolean synchronous ) { return new UnicastSubject < T > ( synchron"], "doc_hash": "6109b50d65d3734eb997cc8ab28375c113ba608f0d3352b7431650298675d932", "prompt_hash": "d0fd94ce29ad3166cf443ed81f4586792409a3897abbcac22d82458914d1ddbe", "target_hash": "a8241ea22f928841efbfe7d498fb4f678735863a74a8f05b261b7061cabc5002", "smoothed_bleu_4": 1.1204966838980732}
{"doc_id": 19, "doc": {"id": 19, "repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/subjects/UnicastSubject.java", "func_name": "UnicastSubject.create", "original_string": "@CheckReturnValue\n    @NonNull\n    public static <T> UnicastSubject<T> create(int capacityHint, Runnable onTerminate) {\n        return new UnicastSubject<T>(capacityHint, onTerminate, true);\n    }", "language": "java", "code": "@CheckReturnValue\n    @NonNull\n    public static <T> UnicastSubject<T> create(int capacityHint, Runnable onTerminate) {\n        return new UnicastSubject<T>(capacityHint, onTerminate, true);\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "NonNull", "public", "static", "<", "T", ">", "UnicastSubject", "<", "T", ">", "create", "(", "int", "capacityHint", ",", "Runnable", "onTerminate", ")", "{", "return", "new", "UnicastSubject", "<", "T", ">", "(", "capacityHint", ",", "onTerminate", ",", "true", ")", ";", "}"], "docstring": "Creates an UnicastSubject with the given internal buffer capacity hint and a callback for\nthe case when the single Subscriber cancels its subscription.\n\n<p>The callback, if not null, is called exactly once and\nnon-overlapped with any active replay.\n\n@param <T> the value type\n@param capacityHint the hint to size the internal unbounded buffer\n@param onTerminate the callback to run when the Subject is terminated or cancelled, null not allowed\n@return an UnicastSubject instance", "docstring_tokens": ["Creates", "an", "UnicastSubject", "with", "the", "given", "internal", "buffer", "capacity", "hint", "and", "a", "callback", "for", "the", "case", "when", "the", "single", "Subscriber", "cancels", "its", "subscription", "."], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/subjects/UnicastSubject.java#L211-L215"}, "target": "Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .", "arguments": {"gen_args_0": {"arg_0": "@ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint , Runnable onTerminate ) { return new UnicastSubject < T > ( capacityHint , onTerminate , true ) ; }", "arg_1": {"num_beams": 10, "max_gen_toks": 128, "until": ["</s>"]}}}, "resps": [["\n\n@ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint ) { return new UnicastSubject < T > ( capacityHint , true ) ; }\n\n@ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( Runnable onTerminate ) { return new UnicastSubject < T > ( true ) ; }\n\n@ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create () { return new UnicastSubject < T > ( true ) ; }"]], "filtered_resps": ["\n\n@ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint ) { return new UnicastSubject < T > ( capacityHint , true ) ; }\n\n@ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( Runnable onTerminate ) { return new UnicastSubject < T > ( true ) ; }\n\n@ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create () { return new UnicastSubject < T > ( true ) ; }"], "doc_hash": "368a1ba8658b8533890e1c4887f1857fd6fb5abe37f3dc322cf34046f754e578", "prompt_hash": "0aba5a2a51d5d4836d31e2dde340b85ba4ed46a6aea8270517da8d14957ca1ae", "target_hash": "9f4530a0cf948d68d1676e8c89a6adc9a73f6f4b58b509a4236a9499272511c2", "smoothed_bleu_4": 1.1204966838980732}
