name: CI Pipeline

on:
  # Runs the pipeline on every push or a pull request to the main branch
  push:
    branches:
      - main 
  pull_request:
    branches:
      - main

jobs:
  ## Linting the code
  lint:
    name: Code Quality Checks (Linting)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
    
      - name: Set up Python
        uses: actions/setup-python@v4 # Todo: check what version to use
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8  # Linter for Python
      
      - name: Run Linter (flake8) on all Python Files
        run: |
          flake8 .
  
  # ## Building the docker image
  # docker_build:
  #   name: Build and Push Docker Image 
  #   runs-on: ubuntu-latest
  #   # needs: lint

  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
      
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_PASSWORD }}

  #     - name: Build and Push Docker image
  #       run: |
  #         docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/logicgpt:${{ github.sha }} .
  #         docker push ${{ secrets.DOCKERHUB_USERNAME }}/logicgpt:${{ github.sha }}
  
  #     # Clean up Docker system after building and pushing the image
  #     - name: Clean up Docker
  #       run: |
  #         docker system prune -af --volumes

  ## Download model and test API in one job
  test_api_with_model:
    name: Download Model and Test API
    runs-on: ubuntu-latest
    # needs: docker_build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install gdown
        run: |
          python -m pip install gdown

      - name: Download model from Google Drive
        run: |
          mkdir -p model_files
          gdown 1OWYw131Ch2I-Cti4dpgRgfwHNw_mQHS- -O ./model_files/unsloth.Q4_K_M.gguf

      - name: Set correct permissions for model files
        run: |
          chmod -R 755 ./model_files

      - name: Verify model file in repo context
        run: |
          if [ -f ./model_files/unsloth.Q4_K_M.gguf ]; then
            echo "Model file verified in repo context."
          else
            echo "Model file not found in repo context."
            exit 1
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Start the API with Docker Compose
        run: |
          DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
          
          # Define the Docker image tag manually
          DOCKER_IMAGE_TAG="17f6955afd1655fed75fb9b09afc84c2200f1ef6"

          # Alternatively, dynamically set the image tag based on the commit ID
          # DOCKER_IMAGE_TAG=$(git rev-parse HEAD)

          # Write the variables to the .env file
          echo "DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME" > .env
          echo "DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG" >> .env

          # Verify the contents of the .env file
          cat .env

          # Start Docker Compose with the defined variables
          docker compose -f compose_test.yaml up --build