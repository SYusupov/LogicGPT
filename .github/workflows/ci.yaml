name: CI Pipeline

on:
  # Runs the pipeline on every push or a pull request to the main branch
  push:
    branches:
      - main 
  pull_request:
    branches:
      - main

jobs:
  ## Linting the code
  lint:
    name: Code Quality Checks (Linting)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
    
      - name: Set up Python
        uses: actions/setup-python@v4 # Todo: check what version to use
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8  # Linter for Python
      
      - name: Run Linter (flake8) on all Python Files
        run: |
          flake8 .
  
  # ## Building the docker image
  # docker_build:
  #   name: Build and Push Docker Image 
  #   runs-on: ubuntu-latest
  #   # needs: lint

  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
      
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_PASSWORD }}

  #     - name: Build and Push Docker image
  #       run: |
  #         docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/logicgpt:${{ github.sha }} .
  #         docker push ${{ secrets.DOCKERHUB_USERNAME }}/logicgpt:${{ github.sha }}
  
  #     # Clean up Docker system after building and pushing the image
  #     - name: Clean up Docker
  #       run: |
  #         docker system prune -af --volumes
  
  ## Download model after building Docker image
  download_model:
    name: Download Model File
    runs-on: ubuntu-latest
    # needs: docker_build

    steps:
      - name: Install gdown
        run: |
          python -m pip install gdown

      - name: Download model from Google Drive
        run: |
          mkdir -p model_files
          gdown 1OWYw131Ch2I-Cti4dpgRgfwHNw_mQHS- -O ./model_files/unsloth.Q4_K_M.gguf

      - name: Verify model file
        run: |
          ls -lh ./model_files
        
  ## Testing if the API works correctly
  test_api:
    name: Test API
    # needs: [docker_build, download_model]  # Only run this after the Docker build is successful
    needs: download_model
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
      - name: Start the API with Docker Compose
        run: |
          DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
          
          # Define the Docker image tag manually
          # in case didn't run docker_build workflow
          DOCKER_IMAGE_TAG="d3530885b6ae868333e0e618af2910f9085d6dd7"

          # Alternatively, dynamically set the image tag based on the commit ID
          # DOCKER_IMAGE_TAG=$(git rev-parse HEAD)

          # Write the variables to the .env file
          echo "DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME" > .env
          echo "DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG" >> .env

          # Verify the contents of the .env file
          cat .env

          # Start Docker Compose with the defined variables
          docker compose -f compose.yaml up --build
          
      - name: Wait for API to be Ready
        run: |
          count=0
          until curl -s http://localhost:8000 | grep "Hello"; do
            count=$((count+1))
            if [ $count -ge 4 ]; then
              echo "API did not become ready in time. Exiting."
              exit 1
            fi
            echo "Waiting for API to be ready... ($count)"
            sleep 5
          done
          echo "API is ready!"
      
      - name: Run API Tests
        run: |
          cd app
          pytest test_api.py
      
      - name: Tear Down Docker Compose
        run: |
          docker compose down